cat(paste0("skipping ", sub_varlist[[d]],"; already exists, overwrite = F\n"))
}
} # each sub var
}# each ds_list
} # each sim_list
}
# load data from level 2 nc files (approx <10sec)
startTime = Sys.time()
if(!file.exists(file.path(Rdata_path,fl))){
get_l2(
ID          = "_1990_subgrid",
overwrite   = T,
xi_rangeIN  = seq(1,182,10),
eta_rangeIN = seq(1,258,10),
ds_list     = dl[1],  # must be same length as sub_varlist
trIN        = tr,
yearsIN     = 1990,
sub_varlist = list('Bottom 5m' = "temp" ),
sim_list    = sim  )
}
endTime  = Sys.time()
endTime  - startTime
# load data from level 2 nc files for all years and vars (yearsIN = NULL by default)
#       NOTE: THIS IS SLOOOOOW..~ 1 min
startTime2 = Sys.time()
if(!file.exists(file.path(Rdata_path,fl))){
get_l2(
ID          = IDin,
overwrite   = T,
xi_rangeIN  = seq(1,182,10),
eta_rangeIN = seq(1,258,10),
ds_list     = dl,
trIN        = tr,
sub_varlist = svl,
sim_list    = sim  )
}
endTime2  = Sys.time()
endTime2  - startTime2
# load R data file
load(fl)   # temp
# there are smarter ways to do this;looping because
# we don't want to mess it up but this is slow...
i <-1
data_long <- data.frame(latitude = as.vector(temp$lat),
longitude = as.vector(temp$lon),
val = as.vector(temp$val[,,i]),
time = temp$time[i],
year = substr( temp$time[i],1,4),stringsAsFactors = F
)
for(i in 2:dim(temp$val)[3])
data_long <- rbind(data_long,
data.frame(latitude = as.vector(temp$lat),
longitude = as.vector(temp$lon),
val = as.vector(temp$val[,,i]),
time = temp$time[i],
year = substr( temp$time[i],1,4),stringsAsFactors = F)
)
# get the mean values for the time blocks from the rdata versions
# may throw "implicit NA" errors that can be ignored
tmp_var <-data_long # get mean var val for each time segment
j<-0
for(i in 1:length(time_seg)){
if(length( which(as.numeric(tmp_var$year)%in%time_seg[[i]] ))>0){
j <- j +1
mn_tmp_var <- tmp_var%>%
filter(year%in%time_seg[[i]],!is.na(val))%>%
group_by(latitude, longitude)%>%
summarise(mnval = mean(val,rm.na=T))
mn_tmp_var$time_period = factor(names(time_seg)[i],levels=names(time_seg))
if(j == 1) mn_var <- mn_tmp_var
if(j >  1) mn_var <- rbind(mn_var,mn_tmp_var)
rm(mn_tmp_var)
}
}
# convert results to a shapefile
L2_sf  <- convert2shp(mn_var%>%filter(!is.na(mnval)))
p9_hind     <- plot_stations_basemap(sfIN = L2_sf,
fillIN = "mnval",
colorIN = "mnval",
sizeIN=.6) +
facet_grid(.~time_period)+
scale_color_viridis_c()+
scale_fill_viridis_c()+
guides(
color =  guide_legend(title="Bottom T (degC)"),
fill  =  guide_legend(title="Bottom T (degC)")) +
ggtitle(paste(sim,var_use,IDin))
# This is slow but it works (repeat dev.new() twice if in Rstudio)...
dev.new()
p9_hind
p9_hind
time_seg
# there are smarter ways to do this;looping because
# we don't want to mess it up but this is slow...
i <-1
data_long <- data.frame(latitude = as.vector(temp$lat),
longitude = as.vector(temp$lon),
val = as.vector(temp$val[,,i]),
time = temp$time[i],
year = substr( temp$time[i],1,4),stringsAsFactors = F
)
for(i in 2:dim(temp$val)[3])
data_long <- rbind(data_long,
data.frame(latitude = as.vector(temp$lat),
longitude = as.vector(temp$lon),
val = as.vector(temp$val[,,i]),
time = temp$time[i],
year = substr( temp$time[i],1,4),stringsAsFactors = F)
)
time_seg
tmp_var <-data_long # get mean var val for each time segment
j<-0
(length( which(as.numeric(tmp_var$year)%in%time_seg[[i]] ))>0)
i<-1
which(as.numeric(tmp_var$year)%in%time_seg[[i]] )
length( which(as.numeric(tmp_var$year)%in%time_seg[[i]] ))>0
j
j <- j +1
mn_tmp_var <- tmp_var%>%
filter(year%in%time_seg[[i]],!is.na(val))%>%
group_by(latitude, longitude)%>%
summarise(mnval = mean(val,rm.na=T))
mn_tmp_var
mn_tmp_var
factor(names(time_seg)[i],levels=names(time_seg))
mn_tmp_var$time_period <- factor(names(time_seg)[i],levels=names(time_seg))
j
i<-2
if(j == 1) mn_var <- mn_tmp_var
if(j >  1) mn_var <- rbind(mn_var,mn_tmp_var)
(length( which(as.numeric(tmp_var$year)%in%time_seg[[i]] ))>0)
as.numeric(tmp_var$year)
tmp_var$year
tmp_var
tmp_var
substr( temp$time[i],1,4)
substr( temp$time[i],1,4)
temp$time
nc
ncIN
ncIN$var[[eval(varIN)]]$dim[[ndims]]$vals
as.POSIXct(
ncIN$var[[eval(varIN)]]$dim[[ndims]]$vals,
origin = substr(ncIN$var[[eval(varIN)]]$dim[[ndims]]$units,15,36),
tz = "GMT")
max( as.POSIXct(
ncIN$var[[eval(varIN)]]$dim[[ndims]]$vals,
origin = substr(ncIN$var[[eval(varIN)]]$dim[[ndims]]$units,15,36),
tz = "GMT"))
# get time variable from .nc file
t   <- as.POSIXct(
ncIN$var[[eval(varIN)]]$dim[[ndims]]$vals,
origin = substr(ncIN$var[[eval(varIN)]]$dim[[ndims]]$units,15,36),
tz = "GMT")
# subset the lat and lon values
lat    <- ncvar_get(ncIN, varid = "lat_rho")[xi_range,eta_range]
lon    <- ncvar_get(ncIN, varid = "lon_rho")[xi_range,eta_range]
# get the length of the timesteps, and lat, lon
if(!length(time_range)==1){
subt <- intersect(which(t>=time_range[1]), which(t<=time_range[2]))
}else{
subt <- which(t>=time_range[1])[1]
}
nt   <- length(subt)
if(!nt>0) message("Invalid time range or format (e.g., '2006-01-22 12:00:00 GMT') ")
nlat    <- length(xi_range)
nlon    <- length(eta_range)
varsize <- ncIN$var[[eval(varIN)]]$varsize
t[subt]
subt
time_range
which(t>=time_range[1])[1]
time_range
# get the length of the timesteps, and lat, lon
# if(!length(time_range)==1){
#     subt <- intersect(which(t>=time_range[1]), which(t<=time_range[2]))
# }else{
subt <- rep(t[1],length(time_range))
subt <- rep(t[1],length(time_range))
for(tt in 1:length(time_range)){
subt[tt] <- which(t>=time_range[1])[1]
}
# get time variable from .nc file
t   <- as.POSIXct(
ncIN$var[[eval(varIN)]]$dim[[ndims]]$vals,
origin = substr(ncIN$var[[eval(varIN)]]$dim[[ndims]]$units,15,36),
tz = "GMT")
# subset the lat and lon values
lat    <- ncvar_get(ncIN, varid = "lat_rho")[xi_range,eta_range]
lon    <- ncvar_get(ncIN, varid = "lon_rho")[xi_range,eta_range]
# get the length of the timesteps, and lat, lon
# if(!length(time_range)==1){
#     subt <- intersect(which(t>=time_range[1]), which(t<=time_range[2]))
# }else{
subt <- rep(t[1],length(time_range))
time_range
which(t>=time_range[1])[1]
subt <- rep(t[1],length(time_range))
for(tt in 1:length(time_range)){
subt[tt] <- which(t>=time_range[1])[1]
}
which(t>=time_range[1])[1]
# get the length of the timesteps, and lat, lon
# if(!length(time_range)==1){
#     subt <- intersect(which(t>=time_range[1]), which(t<=time_range[2]))
# }else{
subt <- which(t>=time_range[1])[1]
subt <- which(t>=time_range[1])[1]
for(tt in 1:length(time_range)){
if(any(t>=time_range[[tt]]))
subt <- c(subt,which(t>=time_range[tt])[1])
}
subt
t[subt]
#'
#'get_level2
#'
get_level2<- function(ncIN,
varIN,
xi_range  = 1:182,  # 182
eta_range = 1:258,  # 258
originIN = originIN,
time_range  = c("2006-01-22 12:00:00 GMT","2006-02-05 12:00:00 GMT")){
# get the number of dimensions (time is often the last one)
ndims <- ncIN$var[[eval(varIN)]]$ndims
# convert time_range to POSIXct
time_range <- as.POSIXct(time_range,
origin =   originIN,
tz = "GMT")
# get time variable from .nc file
t   <- as.POSIXct(
ncIN$var[[eval(varIN)]]$dim[[ndims]]$vals,
origin = substr(ncIN$var[[eval(varIN)]]$dim[[ndims]]$units,15,36),
tz = "GMT")
# subset the lat and lon values
lat    <- ncvar_get(ncIN, varid = "lat_rho")[xi_range,eta_range]
lon    <- ncvar_get(ncIN, varid = "lon_rho")[xi_range,eta_range]
# get the length of the timesteps, and lat, lon
# if(!length(time_range)==1){
#     subt <- intersect(which(t>=time_range[1]), which(t<=time_range[2]))
# }else{
subt <- which(t>=time_range[1])[1]
for(tt in 1:length(time_range)){
if(any(t>=time_range[[tt]]))
subt <- c(subt,which(t>=time_range[tt])[1])
}
#}
nt   <- length(subt)
if(!nt>0) message("Invalid time range or format (e.g., '2006-01-22 12:00:00 GMT') ")
nlat    <- length(xi_range)
nlon    <- length(eta_range)
varsize <- ncIN$var[[eval(varIN)]]$varsize
val <- array(NA,c(nlat,nlon,nt))
cat(paste("getting data for ",nt," timeperiods\n"))
for( i in 1:nt ) {
cat('\r',round(100*i/nt),"%")
flush.console()
# Initialize start and count to read one timestep of the variable.
start        <- rep(1,ndims)	# begin with start=(1,1,1,...,1)
start[ndims] <- subt[i]	      # change to start=(1,1,1,...,i) to read timestep i
count        <- varsize	      # begin w/count=(nx,ny,nz,...,nt), reads entire var
count[ndims] <- 1	            # change to count=(nx,ny,nz,...,1) to read 1 tstep
tmpdat       <- ncvar_get( ncIN, varIN, start=start, count=count )
time[i]      <-
val[,,i]     <- tmpdat[xi_range,eta_range]
}
cat("\n")
return(list(var = varIN, lat =lat, lon = lon ,time = t[subt],val=val ))
}
# load data from level 2 nc files (approx <10sec)
startTime = Sys.time()
if(!file.exists(file.path(Rdata_path,fl))){
get_l2(
ID          = "_1990_subgrid",
overwrite   = T,
xi_rangeIN  = seq(1,182,10),
eta_rangeIN = seq(1,258,10),
ds_list     = dl[1],  # must be same length as sub_varlist
trIN        = tr,
yearsIN     = 1990,
sub_varlist = list('Bottom 5m' = "temp" ),
sim_list    = sim  )
}
ncpath
nc             <- nc_open(ncpath)
ncIN <- nc
# get the number of dimensions (time is often the last one)
ndims <- ncIN$var[[eval(varIN)]]$ndims
ndims
# convert time_range to POSIXct
time_range <- as.POSIXct(time_range,
origin =   originIN,
tz = "GMT")
time_range
# get time variable from .nc file
t   <- as.POSIXct(
ncIN$var[[eval(varIN)]]$dim[[ndims]]$vals,
origin = substr(ncIN$var[[eval(varIN)]]$dim[[ndims]]$units,15,36),
tz = "GMT")
t
ncIN$var[[eval(varIN)]]$dim[[ndims]]
# get time variable from .nc file
t   <- as.POSIXct(
ncIN$var[[eval(varIN)]]$dim[[ndims]]$vals,
origin = substr(ncIN$var[[eval(varIN)]]$dim[[ndims]]$units,15,36),
tz = "GMT")
t
# subset the lat and lon values
lat    <- ncvar_get(ncIN, varid = "lat_rho")[xi_range,eta_range]
lon    <- ncvar_get(ncIN, varid = "lon_rho")[xi_range,eta_range]
# get the length of the timesteps, and lat, lon
# if(!length(time_range)==1){
#     subt <- intersect(which(t>=time_range[1]), which(t<=time_range[2]))
# }else{
subt <- which(t>=time_range[1])[1]
for(tt in 1:length(time_range)){
if(any(t>=time_range[[tt]]))
subt <- c(subt,which(t>=time_range[tt])[1])
}
subt
#}
nt   <- length(subt)
if(!nt>0) message("Invalid time range or format (e.g., '2006-01-22 12:00:00 GMT') ")
nlat    <- length(xi_range)
nlon    <- length(eta_range)
varsize <- ncIN$var[[eval(varIN)]]$varsize
val <- array(NA,c(nlat,nlon,nt))
cat(paste("getting data for ",nt," timeperiods\n"))
cat('\r',round(100*i/nt),"%")
flush.console()
# Initialize start and count to read one timestep of the variable.
start        <- rep(1,ndims)	# begin with start=(1,1,1,...,1)
start[ndims] <- subt[i]	      # change to start=(1,1,1,...,i) to read timestep i
count        <- varsize	      # begin w/count=(nx,ny,nz,...,nt), reads entire var
count[ndims] <- 1	            # change to count=(nx,ny,nz,...,1) to read 1 tstep
tmpdat       <- ncvar_get( ncIN, varIN, start=start, count=count )
t[subt]
#'
#'get_level2
#'
get_level2<- function(ncIN,
varIN,
xi_range  = 1:182,  # 182
eta_range = 1:258,  # 258
originIN = originIN,
time_range  = c("2006-01-22 12:00:00 GMT","2006-02-05 12:00:00 GMT")){
# get the number of dimensions (time is often the last one)
ndims <- ncIN$var[[eval(varIN)]]$ndims
# convert time_range to POSIXct
time_range <- as.POSIXct(time_range,
origin =   originIN,
tz = "GMT")
# get time variable from .nc file
t   <- as.POSIXct(
ncIN$var[[eval(varIN)]]$dim[[ndims]]$vals,
origin = substr(ncIN$var[[eval(varIN)]]$dim[[ndims]]$units,15,36),
tz = "GMT")
# subset the lat and lon values
lat    <- ncvar_get(ncIN, varid = "lat_rho")[xi_range,eta_range]
lon    <- ncvar_get(ncIN, varid = "lon_rho")[xi_range,eta_range]
# get the length of the timesteps, and lat, lon
# if(!length(time_range)==1){
#     subt <- intersect(which(t>=time_range[1]), which(t<=time_range[2]))
# }else{
subt <- which(t>=time_range[1])[1]
for(tt in 1:length(time_range)){
if(any(t>=time_range[[tt]]))
subt <- c(subt,which(t>=time_range[tt])[1])
}
#}
nt   <- length(subt)
if(!nt>0) message("Invalid time range or format (e.g., '2006-01-22 12:00:00 GMT') ")
nlat    <- length(xi_range)
nlon    <- length(eta_range)
varsize <- ncIN$var[[eval(varIN)]]$varsize
val <- array(NA,c(nlat,nlon,nt))
cat(paste("getting data for ",nt," timeperiods\n"))
for( i in 1:nt ) {
cat('\r',round(100*i/nt),"%")
flush.console()
# Initialize start and count to read one timestep of the variable.
start        <- rep(1,ndims)	# begin with start=(1,1,1,...,1)
start[ndims] <- subt[i]	      # change to start=(1,1,1,...,i) to read timestep i
count        <- varsize	      # begin w/count=(nx,ny,nz,...,nt), reads entire var
count[ndims] <- 1	            # change to count=(nx,ny,nz,...,1) to read 1 tstep
tmpdat       <- ncvar_get( ncIN, varIN, start=start, count=count )
val[,,i]     <- tmpdat[xi_range,eta_range]
}
cat("\n")
return(list(var = varIN, lat =lat, lon = lon ,time = t[subt],val=val ))
}
remote_main  <- "/gscratch/bumblereem/roms_for_public"
remotefolder  <- paste0("kkari@mox.hyak.uw.edu:",remote_main)
paste0("rsync -avz --dry-run --include='**/Level*/*ACLIM*.nc' --include='*/' --exclude='*' ",remotefolder," ",localfolder)
(paste0("rsync -avz --dry-run --include='**/Level*/*ACLIM*.nc' --include='*/' --exclude='*' ",remotefolder," ",localfolder))
redownload_level3_mox
# SETUP WORKSPACE
tmstp  <- format(Sys.time(), "%Y_%m_%d")
main   <- getwd()  #"~/GitHub_new/ACLIM2"
# loads packages, data, setup, etc.
source("R/make.R")
tmstp  <- format(Sys.time(), "%Y_%m_%d")
main   <- getwd()  #"~/GitHub_new/ACLIM2"
# loads packages, data, setup, etc.
source("R/make.R")
# --------------------------------------
### To re download data from mox (Kirstin) switch "redownload_level3_mox" to TRUE in setup.R
# Accessing ROMSNPZ on mox (hyak UW)
# If you have a UW ID and are authorized on
# hyak (can do this through myUW.com, under settings>computing):
remote_main  <- "/gscratch/bumblereem/roms_for_public"
remotefolder  <- paste0("kkari@mox.hyak.uw.edu:",remote_main)
redownload_level3_mox
redownload_level3_mox<-T
remotefolder
cat((paste0("rsync -avz --progress --include='**/Level*/*ACLIM*.nc' --include='*/' --exclude='*' ",remotefolder," ",localfolder)))
dir("/Users/kholsman/GitHub_new/ACLIM2/Data/in/Newest/roms_for_aclim")
dir("/Users/kholsman/GitHub_new/ACLIM2/Data/in/Newest/")
(paste0("rsync -avz --dry-run --include='**/Level*/*ACLIM*.nc' --include='*/' --exclude='*' ",remotefolder," ",localfolder))
fldr_mox      <- read.csv("Data/in/fldr_mox_list.csv")
fldr_mox
tmstp
dir("Data")
dir("Data/in")
paste0("Data/inarchived/remote_main_",tmstp)
?dir.copy
?dir.copy
remote_main
localfolder
paste0("cp ",localfolder,"  ",localfolder," ../archived")
tmstp
local_fl
local_fl
localfolder
paste0("cp ",localfolder,"  ",localfolder," ../archived",remote_fl,tmstp)
paste0("cp ",localfolder,"  ",localfolder," ../archived/",remote_fl,tmstp)
dir("/Users/kholsman/GitHub_new/ACLIM2/Data/in/Newest/roms_for_aclim ../archived/")
dir("/Users/kholsman/GitHub_new/ACLIM2/Data/in/Newest/roms_for_aclim../archived/")
dir("/Users/kholsman/GitHub_new/ACLIM2/Data/in/Newest/roms_for_aclim/../")
dir("/Users/kholsman/GitHub_new/ACLIM2/Data/in/Newest/roms_for_aclim/../../")
paste0("cp ",localfolder,"  ",localfolder,"/../../archived/",remote_fl,tmstp)
dir("/Users/kholsman/GitHub_new/ACLIM2/Data/in/Newest/roms_for_aclim/../../archived/")
localfolder
system (paste0("cp ",localfolder,"  ",localfolder,"/../../archived/",remote_fl,tmstp))
paste0("cp -R ",localfolder,"  ",localfolder,"/../../archived/",remote_fl,tmstp)
system (paste0("cp -R ",localfolder,"  ",localfolder,"/../../archived/",remote_fl,tmstp))
system (paste0("cp -R ",localfolder,"  ",localfolder,"/../../archived/",remote_fl,tmstp))
localfolder
system (paste0("cp -R ",localfolder,"/",remote_fl,"  ",localfolder,"/../../archived/",remote_fl,tmstp))
system (paste0("cp -R ",localfolder,"/",remote_fl,"  ",localfolder,"/../../archived/",remote_fl,tmstp))
remote_fl
localfolder
system (paste0("cp -R ",localfolder,"  ",localfolder,"/../../archived/",remote_fl,tmstp))
system (paste0("cp -R ",localfolder,"  ",localfolder,"/../../archived/",remote_fl,tmstp))
tmstp
localfolder
system (paste0("rm -r ",localfolder)
}
system (paste0("rm -r ",localfolder)
0
paste0("system( rm -r ",localfolder))
paste0("system( rm -r ",localfolder,")")
paste0( "rm -r ",localfolder)
txt<- paste0( "rm -r ",localfolder)
system(txt)
dir.create(localfolder)
fldr_mox
i<1
i<-1
dir.create(file.path(localfolder,fldr_mox[i]))
fldr_mox[i]
fldr_mox[i]
fldr_mox      <- read.csv("Data/in/fldr_mox_list.csv",header=F)
fldr_mox[1,]
fldr_mox      <- read.csv("Data/in/fldr_mox_list.csv",header=F,"string")
?read.csv
fldr_mox      <- read.csv("Data/in/fldr_mox_list.csv",header=F,stringsAsFactors=F)
fldr_mox
fldr_mox[1]
fldr_mox[1,]
cat( (paste0("rsync -avz --progress --include='**/Level3/*forecast*.nc' --include='*/' --exclude='*' ",remotefolder," ",localfolder)))
dir.create(file.path(localfolder,"B10K-K20_CORECFS"))
getwd()
dir("/Users/kholsman/GitHub_new/ACLIM2/Data/in/Newest/roms_for_aclim")
cat( (paste0("rsync -avz --progress --include='**/Level3/*forecast*.nc' --include='*/' --exclude='*' ",remotefolder," ",localfolder)))
cat( (paste0("rsync -avz --progress --include='**/Level3/*coldpool*.nc' --include='*/' --exclude='*' ",remotefolder," ",localfolder)))
cat((paste0("rsync -avz --progress --include='**/Level*/*ACLIM*.nc' --include='*/' --exclude='*' ",remotefolder," ",localfolder)))
remote_fl
dir.rename()
file.rename("Data/in/Newest/test","Data/in/Newest/test2")
local_fl
localfolder
cat((paste0("rsync -avz --progress --include='**/Level*/*ACLIM*.nc' --include='*/' --exclude='*' ",remotefolder," ",local_fl)))
cat((paste0("rsync -avz --progress --include='**/Level*/*ACLIM*.nc' --include='*/' --exclude='*' ",remotefolder," ",local_fl)))
cat( (paste0("rsync -avz --progress --include='**/Level3/*coldpool*.nc' --include='*/' --exclude='*' ",remotefolder," ",local_fl)))
cat( (paste0("rsync -avz --progress --include='**/Level3/*forecast*.nc' --include='*/' --exclude='*' ",remotefolder," ",local_fl)))
local_fl
rsync -avz --progress --include='**/Level3/*coldpool*.nc' --include='*/' --exclude='*' kkari@mox.hyak.uw.edu:/gscratch/bumblereem/roms_for_public /Users/kholsman/GitHub_new/ACLIM2/Data/in/Newest
#source("R/make.R")       # loads packages, data, setup, etc.
knitr::opts_chunk$set(echo = T, fig.align="center")
thisYr <- format(Sys.time(), "%Y")
today  <- format(Sys.time(), "%b %d, %Y")
# --------------------------------------
# SETUP WORKSPACE
tmstp  <- format(Sys.time(), "%Y_%m_%d")
main   <- getwd()  #"~/GitHub_new/ACLIM2"
# loads packages, data, setup, etc.
suppressWarnings(source("R/make.R"))
# --------------------------------------
getwd()
main
dir("R")
