download_nc = FALSE,
rd_path     = file.path(main,Rdata_path),
local_path  = NULL,
overwrite   = FALSE,
xi_rangeIN  = 1:182,
eta_rangeIN = 1:258,
ID          = "",
ds_list     = dl,
yearsIN     = NULL,
originIN    = "1900-01-01 00:00:00",
trIN        = c("-08-1 12:00:00 GMT"),
sub_varlist = list(
"temp",
"temp",
c("EupS","Cop","NCaS") ),
sim_list  ) {
# preview the datasets on the server:
url_list <- tds_list_datasets(thredds_url = ACLIM_data_url)
# now grab dattat for the hindcast and projection sets:
for(m in sim_list){
cat(paste("get "),m,"\n")
# create the simulation Level2 folder (and overwrite it if overwrite is set to T)
if(!dir.exists(file.path(rd_path,m)))
dir.create(file.path(rd_path,m))
if(!dir.exists(file.path(rd_path,m,"/Level2")) )
dir.create(file.path(rd_path,m,"/Level2"))
for(d in 1:length(ds_list)){
cat("------------------\n")
cat(paste("get "),ds_list[d],"\n")
cat("------------------\n")
# create filename:
tmp_fl     <- paste0(d,"_",m)
tmppath    <- file.path(rd_path,paste0(m,"/Level2/",ds_list[d],"_",m,".nc"))
tmppath    <- stringr::str_replace(tmppath," 5m","_5m")
if(web_nc){
# create the temporary URL
# get the url for the simulation
m_url       <- url_list[url_list$dataset == paste0(m,"/"),]$path
# preview the projection and hindcast data and data catalogs (Level 1, 2, and 3):
m_datasets  <- tds_list_datasets(thredds_url = m_url)
# get Level 2 .nc file URL
m_l2_cat       <- m_datasets[m_datasets$dataset == "Level 2/",]$path
m_l2_datasets  <- tds_list_datasets(m_l2_cat)
m_l2_vT_url    <- m_l2_datasets[m_l2_datasets$dataset == ds_list[d],]$path
m_flnm         <- strsplit(m_l2_vT_url,split="dataset=")[[1]][2]
if(length( grep("B10K_K20",m_flnm))>0 )
m_flnm       <- stringr::str_replace(m_flnm,"B10K_K20","B10K-K20")
m_flnm         <- stringr::str_replace(m_flnm,"Level2_","")
tmppath        <- file.path(rd_path,paste0(m,"/Level2/",ds_list[d],"_",m,".nc"))
tmppath    <- stringr::str_replace(tmppath," 5m","_5m")
if(ds_list[d] =="Surface 5m")
m_flnm       <- stringr::str_replace(m_flnm,"surface_5m","surface5m")
if(download_nc){
error("downloading level 2 files not yet avail.")
if(1==10){
# create local folders for nc files
if(!dir.exists(local_path))
dir.create(local_path)
if(!dir.exists( file.path( local_path,m ) ))
dir.create( file.path(local_path,m) )
if(!dir.exists( file.path( local_path,paste0(m,"/Level2/") ) ))
dir.create( file.path(local_path,paste0(m,"/Level2/")) )
# download the nc file and save locally
#https://data.pmel.noaa.gov/aclim/thredds/fileServer/B10K-K20_CORECFS/Level2/2015-2019/B10K-K20_CORECFS_2015-2019_average_temp_bottom5m.nc
tmpURL         <- paste0(paste0(ACLIM_data_url,"fileServer/Level2/"),m_flnm,".nc")
download.file(tmpURL,destfile = tmppath, overwrite = T)
# open the local netcdf file
nc     <- nc_open(tmppath)
}
}else{
tmpURL         <- paste0(paste0(ACLIM_data_url,"dodsC/Level2/"),m_flnm,".nc")
# open the netcdf file remotely
ncpath      <- tmpURL
#nc         <- nc_open(tmpURL)
}
}else{
ncpath     <- tmp_path
#nc         <- nc_open(tmp_path)
}
for(var_get in sub_varlist[[d]]){
# name the rdata out file:
tmp_rdpath     <- file.path( main,Rdata_path,m,"Level2",
paste0(m_flnm,"_",var_get,ID,".Rdata"))
if(overwrite | !file.exists(tmp_rdpath)){
cat(paste0("get ",sub_varlist[[d]],"...\n"))
nc             <- nc_open(ncpath)
# available variables:
# names(nc$var)
time_steps  <- as.POSIXct(
nc$var[[ sub_varlist[[d]][1] ]]$dim[[3]]$vals,
origin = originIN,
tz = "GMT")
# get years in simulation
yrs      <- yearsIN
if (is.null(yearsIN))
yrs    <- sort(unique(substr(time_steps,1,4)))
tmp_tr <-  paste0(yrs,trIN)
# subset the lat and lon values
cat("get lat...\n")
lat    <- ncvar_get(nc, varid = "lat_rho")
cat("get lon...\n")
lon    <- ncvar_get(nc, varid = "lon_rho")
#M2 <- (56.87°N, -164.06°W)
cat("get data... (slow)...")
tmp_var      <- get_level2(
ncIN        = nc,
originIN    = originIN,
varIN       = var_get,
xi_range    = xi_rangeIN,
eta_range   = eta_rangeIN,
time_range  = tmp_tr)
# rename the object
eval(parse(text =paste0(var_get,"<-tmp_var") ))
# save the nc file in the Data/in/Newest/Rdata/ [ simulation]/Level3 folder
eval(parse(text =paste0("save(",var_get,", file=tmp_rdpath)")))
eval(parse(text =paste0("rm(",var_get,")") ))
cat(paste("success:",tmp_rdpath, "saved in local folder\n"))
# close the nc file
nc_close(nc)
}else{
#skip it
cat(paste0("skipping ", sub_varlist[[d]],"; already exists, overwrite = F\n"))
}
} # each sub var
}# each ds_list
} # each sim_list
}
# load data from level 2 nc files (approx <10sec)
startTime = Sys.time()
if(!file.exists(file.path(Rdata_path,fl))){
get_l2(
ID          = "_1990_subgrid",
overwrite   = T,
xi_rangeIN  = seq(1,182,10),
eta_rangeIN = seq(1,258,10),
ds_list     = dl[1],  # must be same length as sub_varlist
trIN        = tr,
yearsIN     = 1990,
sub_varlist = list('Bottom 5m' = "temp" ),
sim_list    = sim  )
}
endTime  = Sys.time()
endTime  - startTime
# load data from level 2 nc files for all years and vars (yearsIN = NULL by default)
#       NOTE: THIS IS SLOOOOOW..~ 1 min
startTime2 = Sys.time()
if(!file.exists(file.path(Rdata_path,fl))){
get_l2(
ID          = IDin,
overwrite   = T,
xi_rangeIN  = seq(1,182,10),
eta_rangeIN = seq(1,258,10),
ds_list     = dl,
trIN        = tr,
sub_varlist = svl,
sim_list    = sim  )
}
endTime2  = Sys.time()
endTime2  - startTime2
# load R data file
load(fl)   # temp
# there are smarter ways to do this;looping because
# we don't want to mess it up but this is slow...
i <-1
data_long <- data.frame(latitude = as.vector(temp$lat),
longitude = as.vector(temp$lon),
val = as.vector(temp$val[,,i]),
time = temp$time[i],
year = substr( temp$time[i],1,4),stringsAsFactors = F
)
for(i in 2:dim(temp$val)[3])
data_long <- rbind(data_long,
data.frame(latitude = as.vector(temp$lat),
longitude = as.vector(temp$lon),
val = as.vector(temp$val[,,i]),
time = temp$time[i],
year = substr( temp$time[i],1,4),stringsAsFactors = F)
)
# get the mean values for the time blocks from the rdata versions
# may throw "implicit NA" errors that can be ignored
tmp_var <-data_long # get mean var val for each time segment
j<-0
for(i in 1:length(time_seg)){
if(length( which(as.numeric(tmp_var$year)%in%time_seg[[i]] ))>0){
j <- j +1
mn_tmp_var <- tmp_var%>%
filter(year%in%time_seg[[i]],!is.na(val))%>%
group_by(latitude, longitude)%>%
summarise(mnval = mean(val,rm.na=T))
mn_tmp_var$time_period = factor(names(time_seg)[i],levels=names(time_seg))
if(j == 1) mn_var <- mn_tmp_var
if(j >  1) mn_var <- rbind(mn_var,mn_tmp_var)
rm(mn_tmp_var)
}
}
# convert results to a shapefile
L2_sf  <- convert2shp(mn_var%>%filter(!is.na(mnval)))
p9_hind     <- plot_stations_basemap(sfIN = L2_sf,
fillIN = "mnval",
colorIN = "mnval",
sizeIN=.6) +
facet_grid(.~time_period)+
scale_color_viridis_c()+
scale_fill_viridis_c()+
guides(
color =  guide_legend(title="Bottom T (degC)"),
fill  =  guide_legend(title="Bottom T (degC)")) +
ggtitle(paste(sim,var_use,IDin))
# This is slow but it works (repeat dev.new() twice if in Rstudio)...
dev.new()
p9_hind
p9_hind
time_seg
# there are smarter ways to do this;looping because
# we don't want to mess it up but this is slow...
i <-1
data_long <- data.frame(latitude = as.vector(temp$lat),
longitude = as.vector(temp$lon),
val = as.vector(temp$val[,,i]),
time = temp$time[i],
year = substr( temp$time[i],1,4),stringsAsFactors = F
)
for(i in 2:dim(temp$val)[3])
data_long <- rbind(data_long,
data.frame(latitude = as.vector(temp$lat),
longitude = as.vector(temp$lon),
val = as.vector(temp$val[,,i]),
time = temp$time[i],
year = substr( temp$time[i],1,4),stringsAsFactors = F)
)
time_seg
tmp_var <-data_long # get mean var val for each time segment
j<-0
(length( which(as.numeric(tmp_var$year)%in%time_seg[[i]] ))>0)
i<-1
which(as.numeric(tmp_var$year)%in%time_seg[[i]] )
length( which(as.numeric(tmp_var$year)%in%time_seg[[i]] ))>0
j
j <- j +1
mn_tmp_var <- tmp_var%>%
filter(year%in%time_seg[[i]],!is.na(val))%>%
group_by(latitude, longitude)%>%
summarise(mnval = mean(val,rm.na=T))
mn_tmp_var
mn_tmp_var
factor(names(time_seg)[i],levels=names(time_seg))
mn_tmp_var$time_period <- factor(names(time_seg)[i],levels=names(time_seg))
j
i<-2
if(j == 1) mn_var <- mn_tmp_var
if(j >  1) mn_var <- rbind(mn_var,mn_tmp_var)
(length( which(as.numeric(tmp_var$year)%in%time_seg[[i]] ))>0)
as.numeric(tmp_var$year)
tmp_var$year
tmp_var
tmp_var
substr( temp$time[i],1,4)
substr( temp$time[i],1,4)
temp$time
nc
ncIN
ncIN$var[[eval(varIN)]]$dim[[ndims]]$vals
as.POSIXct(
ncIN$var[[eval(varIN)]]$dim[[ndims]]$vals,
origin = substr(ncIN$var[[eval(varIN)]]$dim[[ndims]]$units,15,36),
tz = "GMT")
max( as.POSIXct(
ncIN$var[[eval(varIN)]]$dim[[ndims]]$vals,
origin = substr(ncIN$var[[eval(varIN)]]$dim[[ndims]]$units,15,36),
tz = "GMT"))
# get time variable from .nc file
t   <- as.POSIXct(
ncIN$var[[eval(varIN)]]$dim[[ndims]]$vals,
origin = substr(ncIN$var[[eval(varIN)]]$dim[[ndims]]$units,15,36),
tz = "GMT")
# subset the lat and lon values
lat    <- ncvar_get(ncIN, varid = "lat_rho")[xi_range,eta_range]
lon    <- ncvar_get(ncIN, varid = "lon_rho")[xi_range,eta_range]
# get the length of the timesteps, and lat, lon
if(!length(time_range)==1){
subt <- intersect(which(t>=time_range[1]), which(t<=time_range[2]))
}else{
subt <- which(t>=time_range[1])[1]
}
nt   <- length(subt)
if(!nt>0) message("Invalid time range or format (e.g., '2006-01-22 12:00:00 GMT') ")
nlat    <- length(xi_range)
nlon    <- length(eta_range)
varsize <- ncIN$var[[eval(varIN)]]$varsize
t[subt]
subt
time_range
which(t>=time_range[1])[1]
time_range
# get the length of the timesteps, and lat, lon
# if(!length(time_range)==1){
#     subt <- intersect(which(t>=time_range[1]), which(t<=time_range[2]))
# }else{
subt <- rep(t[1],length(time_range))
subt <- rep(t[1],length(time_range))
for(tt in 1:length(time_range)){
subt[tt] <- which(t>=time_range[1])[1]
}
# get time variable from .nc file
t   <- as.POSIXct(
ncIN$var[[eval(varIN)]]$dim[[ndims]]$vals,
origin = substr(ncIN$var[[eval(varIN)]]$dim[[ndims]]$units,15,36),
tz = "GMT")
# subset the lat and lon values
lat    <- ncvar_get(ncIN, varid = "lat_rho")[xi_range,eta_range]
lon    <- ncvar_get(ncIN, varid = "lon_rho")[xi_range,eta_range]
# get the length of the timesteps, and lat, lon
# if(!length(time_range)==1){
#     subt <- intersect(which(t>=time_range[1]), which(t<=time_range[2]))
# }else{
subt <- rep(t[1],length(time_range))
time_range
which(t>=time_range[1])[1]
subt <- rep(t[1],length(time_range))
for(tt in 1:length(time_range)){
subt[tt] <- which(t>=time_range[1])[1]
}
which(t>=time_range[1])[1]
# get the length of the timesteps, and lat, lon
# if(!length(time_range)==1){
#     subt <- intersect(which(t>=time_range[1]), which(t<=time_range[2]))
# }else{
subt <- which(t>=time_range[1])[1]
subt <- which(t>=time_range[1])[1]
for(tt in 1:length(time_range)){
if(any(t>=time_range[[tt]]))
subt <- c(subt,which(t>=time_range[tt])[1])
}
subt
t[subt]
#'
#'get_level2
#'
get_level2<- function(ncIN,
varIN,
xi_range  = 1:182,  # 182
eta_range = 1:258,  # 258
originIN = originIN,
time_range  = c("2006-01-22 12:00:00 GMT","2006-02-05 12:00:00 GMT")){
# get the number of dimensions (time is often the last one)
ndims <- ncIN$var[[eval(varIN)]]$ndims
# convert time_range to POSIXct
time_range <- as.POSIXct(time_range,
origin =   originIN,
tz = "GMT")
# get time variable from .nc file
t   <- as.POSIXct(
ncIN$var[[eval(varIN)]]$dim[[ndims]]$vals,
origin = substr(ncIN$var[[eval(varIN)]]$dim[[ndims]]$units,15,36),
tz = "GMT")
# subset the lat and lon values
lat    <- ncvar_get(ncIN, varid = "lat_rho")[xi_range,eta_range]
lon    <- ncvar_get(ncIN, varid = "lon_rho")[xi_range,eta_range]
# get the length of the timesteps, and lat, lon
# if(!length(time_range)==1){
#     subt <- intersect(which(t>=time_range[1]), which(t<=time_range[2]))
# }else{
subt <- which(t>=time_range[1])[1]
for(tt in 1:length(time_range)){
if(any(t>=time_range[[tt]]))
subt <- c(subt,which(t>=time_range[tt])[1])
}
#}
nt   <- length(subt)
if(!nt>0) message("Invalid time range or format (e.g., '2006-01-22 12:00:00 GMT') ")
nlat    <- length(xi_range)
nlon    <- length(eta_range)
varsize <- ncIN$var[[eval(varIN)]]$varsize
val <- array(NA,c(nlat,nlon,nt))
cat(paste("getting data for ",nt," timeperiods\n"))
for( i in 1:nt ) {
cat('\r',round(100*i/nt),"%")
flush.console()
# Initialize start and count to read one timestep of the variable.
start        <- rep(1,ndims)	# begin with start=(1,1,1,...,1)
start[ndims] <- subt[i]	      # change to start=(1,1,1,...,i) to read timestep i
count        <- varsize	      # begin w/count=(nx,ny,nz,...,nt), reads entire var
count[ndims] <- 1	            # change to count=(nx,ny,nz,...,1) to read 1 tstep
tmpdat       <- ncvar_get( ncIN, varIN, start=start, count=count )
time[i]      <-
val[,,i]     <- tmpdat[xi_range,eta_range]
}
cat("\n")
return(list(var = varIN, lat =lat, lon = lon ,time = t[subt],val=val ))
}
# load data from level 2 nc files (approx <10sec)
startTime = Sys.time()
if(!file.exists(file.path(Rdata_path,fl))){
get_l2(
ID          = "_1990_subgrid",
overwrite   = T,
xi_rangeIN  = seq(1,182,10),
eta_rangeIN = seq(1,258,10),
ds_list     = dl[1],  # must be same length as sub_varlist
trIN        = tr,
yearsIN     = 1990,
sub_varlist = list('Bottom 5m' = "temp" ),
sim_list    = sim  )
}
ncpath
nc             <- nc_open(ncpath)
ncIN <- nc
# get the number of dimensions (time is often the last one)
ndims <- ncIN$var[[eval(varIN)]]$ndims
ndims
# convert time_range to POSIXct
time_range <- as.POSIXct(time_range,
origin =   originIN,
tz = "GMT")
time_range
# get time variable from .nc file
t   <- as.POSIXct(
ncIN$var[[eval(varIN)]]$dim[[ndims]]$vals,
origin = substr(ncIN$var[[eval(varIN)]]$dim[[ndims]]$units,15,36),
tz = "GMT")
t
ncIN$var[[eval(varIN)]]$dim[[ndims]]
# get time variable from .nc file
t   <- as.POSIXct(
ncIN$var[[eval(varIN)]]$dim[[ndims]]$vals,
origin = substr(ncIN$var[[eval(varIN)]]$dim[[ndims]]$units,15,36),
tz = "GMT")
t
# subset the lat and lon values
lat    <- ncvar_get(ncIN, varid = "lat_rho")[xi_range,eta_range]
lon    <- ncvar_get(ncIN, varid = "lon_rho")[xi_range,eta_range]
# get the length of the timesteps, and lat, lon
# if(!length(time_range)==1){
#     subt <- intersect(which(t>=time_range[1]), which(t<=time_range[2]))
# }else{
subt <- which(t>=time_range[1])[1]
for(tt in 1:length(time_range)){
if(any(t>=time_range[[tt]]))
subt <- c(subt,which(t>=time_range[tt])[1])
}
subt
#}
nt   <- length(subt)
if(!nt>0) message("Invalid time range or format (e.g., '2006-01-22 12:00:00 GMT') ")
nlat    <- length(xi_range)
nlon    <- length(eta_range)
varsize <- ncIN$var[[eval(varIN)]]$varsize
val <- array(NA,c(nlat,nlon,nt))
cat(paste("getting data for ",nt," timeperiods\n"))
cat('\r',round(100*i/nt),"%")
flush.console()
# Initialize start and count to read one timestep of the variable.
start        <- rep(1,ndims)	# begin with start=(1,1,1,...,1)
start[ndims] <- subt[i]	      # change to start=(1,1,1,...,i) to read timestep i
count        <- varsize	      # begin w/count=(nx,ny,nz,...,nt), reads entire var
count[ndims] <- 1	            # change to count=(nx,ny,nz,...,1) to read 1 tstep
tmpdat       <- ncvar_get( ncIN, varIN, start=start, count=count )
t[subt]
#'
#'get_level2
#'
get_level2<- function(ncIN,
varIN,
xi_range  = 1:182,  # 182
eta_range = 1:258,  # 258
originIN = originIN,
time_range  = c("2006-01-22 12:00:00 GMT","2006-02-05 12:00:00 GMT")){
# get the number of dimensions (time is often the last one)
ndims <- ncIN$var[[eval(varIN)]]$ndims
# convert time_range to POSIXct
time_range <- as.POSIXct(time_range,
origin =   originIN,
tz = "GMT")
# get time variable from .nc file
t   <- as.POSIXct(
ncIN$var[[eval(varIN)]]$dim[[ndims]]$vals,
origin = substr(ncIN$var[[eval(varIN)]]$dim[[ndims]]$units,15,36),
tz = "GMT")
# subset the lat and lon values
lat    <- ncvar_get(ncIN, varid = "lat_rho")[xi_range,eta_range]
lon    <- ncvar_get(ncIN, varid = "lon_rho")[xi_range,eta_range]
# get the length of the timesteps, and lat, lon
# if(!length(time_range)==1){
#     subt <- intersect(which(t>=time_range[1]), which(t<=time_range[2]))
# }else{
subt <- which(t>=time_range[1])[1]
for(tt in 1:length(time_range)){
if(any(t>=time_range[[tt]]))
subt <- c(subt,which(t>=time_range[tt])[1])
}
#}
nt   <- length(subt)
if(!nt>0) message("Invalid time range or format (e.g., '2006-01-22 12:00:00 GMT') ")
nlat    <- length(xi_range)
nlon    <- length(eta_range)
varsize <- ncIN$var[[eval(varIN)]]$varsize
val <- array(NA,c(nlat,nlon,nt))
cat(paste("getting data for ",nt," timeperiods\n"))
for( i in 1:nt ) {
cat('\r',round(100*i/nt),"%")
flush.console()
# Initialize start and count to read one timestep of the variable.
start        <- rep(1,ndims)	# begin with start=(1,1,1,...,1)
start[ndims] <- subt[i]	      # change to start=(1,1,1,...,i) to read timestep i
count        <- varsize	      # begin w/count=(nx,ny,nz,...,nt), reads entire var
count[ndims] <- 1	            # change to count=(nx,ny,nz,...,1) to read 1 tstep
tmpdat       <- ncvar_get( ncIN, varIN, start=start, count=count )
val[,,i]     <- tmpdat[xi_range,eta_range]
}
cat("\n")
return(list(var = varIN, lat =lat, lon = lon ,time = t[subt],val=val ))
}
