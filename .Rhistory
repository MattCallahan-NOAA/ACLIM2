coldpool <-function(x,temp){
sumx <- length(x)
out <- length(x[x<=temp])/sumx
return(out)
}
# get the strata average values:
tmp_cp <- tmp_var%>%
dplyr::filter(var =="temp_bottom5m")%>%
dplyr::group_by(strata,basin,units,yr,sim,long_name,var)%>%
dplyr::summarise(fracbelow200 =coldpool(val,200),
fracbelow2 =coldpool(val,2),
fracbelow1 =coldpool(val,1),
fracbelow0 =coldpool(val,0))
tmp_cp
names(tmp_cp)
unlist(names(tmp_co))
cat(names(tmp_cp))
tmp_cp <- tmp_var%>%
dplyr::filter(var =="temp_bottom5m")%>%
dplyr::group_by(strata,basin,units,yr,sim,long_name,var)%>%
dplyr::summarise(fracbelow200 =coldpool(val,200),
fracbelow2 =coldpool(val,2),
fracbelow1 =coldpool(val,1),
fracbelow0 =coldpool(val,0))%>%
dplyr::mutate(units ="")%>%
dplyr::select(strata, basin, units, yr, sim, fracbelow2, fracbelow1, fracbelow0)
tmp_cp
melt
?melt
tt<-reshape::melt(tmp_cp, id.vars=c(strata, basin, units, yr, sim),
measure.vars =c(fracbelow2, fracbelow1, fracbelow0),
variable_name = "var")
tt<-reshape::melt(tmp_cp, id.vars=c("strata", "basin", "units", "yr", "sim"),
measure.vars =c("fracbelow2", "fracbelow1", "fracbelow0"),
variable_name = "var")
tt<-reshape::melt(tmp_cp, id=c("strata", "basin", "units", "yr", "sim"),
measure.vars =c("fracbelow2", "fracbelow1", "fracbelow0"),
variable_name = "var")
vl <- c(
"temp_bottom5m",
"NCaS_integrated", # Large Cop
"Cop_integrated",  # Small Cop
"EupS_integrated") # Euphausiids
# get large zooplankton as the sum of euph and NCaS
tmp_var_zoop    <- simIN%>%
dplyr::filter(var%in%vl[c(2,4)])%>%
dplyr::group_by(srvy_station_num,
station_id,
latitude,
longitude,
stratum,
doy,subregion,units,
year,sim)%>%
dplyr::summarise(val =sum(val))%>%
dplyr::mutate(var = "largeZoop_integrated",
long_name ="Total On-shelf
large zooplankton concentration,
integrated over depth (NCa, Eup)")
tmp_var    <- simIN%>%
dplyr::select(srvy_station_num,
station_id,
latitude,
longitude,
stratum,
doy,subregion,units,
year,sim,val,
var)
tmp_var$long_name <- srvy_var_def$longname[match(tmp_var$var[1],srvy_var_def$name)]
tmp_var           <- rbind(tmp_var,
tmp_var_zoop[,match(names(tmp_var),names(tmp_var_zoop))])
tmp_var           <- tmp_var%>%
dplyr::rename(basin  = subregion,
yr     = year,
jday   = doy,
strata = stratum)
coldpool <-function(x,temp){
sumx <- length(x)
out <- length(x[x<=temp])/sumx
return(out)
}
# get the strata average values:
tmp_cp <- tmp_var%>%
dplyr::filter(var =="temp_bottom5m")%>%
dplyr::group_by(strata,basin,units,yr,sim,long_name,var)%>%
dplyr::summarise(fracbelow200 =coldpool(val,200),
fracbelow2 =coldpool(val,2),
fracbelow1 =coldpool(val,1),
fracbelow0 =coldpool(val,0))%>%
dplyr::mutate(units ="")%>%
dplyr::select(strata, basin, units, yr, sim, fracbelow2, fracbelow1, fracbelow0)
tt<-reshape::melt(tmp_cp, id.vars=c("strata", "basin", "units", "yr", "sim"),
measure.vars =c("fracbelow2", "fracbelow1", "fracbelow0"),
variable_name = "var")
reshape::melt(tmp_cp, id.vars=c("strata", "basin", "units", "yr", "sim"),
measure.vars =c("fracbelow2", "fracbelow1", "fracbelow0"))
names(tmp_cp)
tmp_cp <- tmp_var%>%
dplyr::filter(var =="temp_bottom5m")%>%
dplyr::group_by(strata,basin,units,yr,sim,long_name,var)%>%
dplyr::summarise(fracbelow200 =coldpool(val,200),
fracbelow2 =coldpool(val,2),
fracbelow1 =coldpool(val,1),
fracbelow0 =coldpool(val,0))%>%
dplyr::mutate(units ="")%>%
dplyr::select(strata, basin, units, yr, sim, fracbelow2, fracbelow1, fracbelow0)
tmp_cp
names(tmp_cp)
tmp_cp <- tmp_var%>%
dplyr::filter(var =="temp_bottom5m")%>%
dplyr::group_by(strata,basin,units,yr,sim,long_name,var)%>%
dplyr::summarise(fracbelow200 =coldpool(val,200),
fracbelow2 =coldpool(val,2),
fracbelow1 =coldpool(val,1),
fracbelow0 =coldpool(val,0))
tmp_cp
unique(tmp_cp$long_name)
vl <- c(
"temp_bottom5m",
"NCaS_integrated", # Large Cop
"Cop_integrated",  # Small Cop
"EupS_integrated") # Euphausiids
# get large zooplankton as the sum of euph and NCaS
tmp_var_zoop    <- simIN%>%
dplyr::filter(var%in%vl[c(2,4)])%>%
dplyr::group_by(srvy_station_num,
station_id,
latitude,
longitude,
stratum,
doy,subregion,units,
year,sim)%>%
dplyr::summarise(val =sum(val))%>%
dplyr::mutate(var = "largeZoop_integrated",
long_name ="Total On-shelf
large zooplankton concentration,
integrated over depth (NCa, Eup)")
tmp_var    <- simIN%>%
dplyr::select(srvy_station_num,
station_id,
latitude,
longitude,
stratum,
doy,subregion,units,
year,sim,val,
var)
srvy_var_def$longname[match(tmp_var$var[1],srvy_var_def$name)]
tmp_var$var[1]
tmp_var$var
unique(tmp_var$var)
tmp_var$long_name <- srvy_var_def$longname[match(tmp_var$var,srvy_var_def$name)]
tmp_var           <- rbind(tmp_var,
tmp_var_zoop[,match(names(tmp_var),names(tmp_var_zoop))])
tmp_var           <- tmp_var%>%
dplyr::rename(basin  = subregion,
yr     = year,
jday   = doy,
strata = stratum)
coldpool <-function(x,temp){
sumx <- length(x)
out <- length(x[x<=temp])/sumx
return(out)
}
# get the strata average values:
tmp_cp <- tmp_var%>%
dplyr::filter(var =="temp_bottom5m")%>%
dplyr::group_by(strata,basin,units,yr,sim,long_name,var)%>%
dplyr::summarise(fracbelow200 =coldpool(val,200),
fracbelow2 =coldpool(val,2),
fracbelow1 =coldpool(val,1),
fracbelow0 =coldpool(val,0))%>%
dplyr::mutate(units ="")%>%
dplyr::select(strata, basin, units, yr, sim, fracbelow2, fracbelow1, fracbelow0)
tmp_cp
source("~/Documents/GitHub/ACLIM2/R/sub_fun/make_indices_region_new.R")
source("~/Documents/GitHub/ACLIM2/R/sub_fun/make_indices_srvyrep_new.R")
source("~/Documents/GitHub/ACLIM2/R/sub_fun/make_indices_srvyrep_new.R")
tmp_cp%>%dplyr::select(strata, basin)
tmp_cp <- tmp_var%>%
dplyr::filter(var =="temp_bottom5m")%>%
dplyr::group_by(strata,basin,units,yr,sim,long_name,var)%>%
dplyr::summarise(fracbelow200 =coldpool(val,200),
fracbelow2 =coldpool(val,2),
fracbelow1 =coldpool(val,1),
fracbelow0 =coldpool(val,0))%>%
dplyr::mutate(units ="")%>%ungroup()%>%
dplyr::select(strata, basin, units, yr, sim, fracbelow2, fracbelow1, fracbelow0)
names(tmp_cp)
tmp_cp <- tmp_var%>%
dplyr::filter(var =="temp_bottom5m")%>%
dplyr::group_by(strata,basin,units,yr,sim,long_name,var)%>%
dplyr::summarise(fracbelow200 =coldpool(val,200),
fracbelow2 =coldpool(val,2),
fracbelow1 =coldpool(val,1),
fracbelow0 =coldpool(val,0))%>%
dplyr::mutate(units ="")%>%ungroup()%>%
dplyr::select(strata, basin, units, yr, sim, fracbelow2, fracbelow1, fracbelow0)
tt<-reshape::melt(tmp_cp, id.vars=c("strata", "basin", "units", "yr", "sim"),
measure.vars =c("fracbelow2", "fracbelow1", "fracbelow0"))
reshape::melt(tmp_cp, id.vars=c("strata", "basin", "units", "yr", "sim"))
names(tmp_cp)
melt(cars)
head(cars)
cast(cars)
tt<-reshape2::melt(tmp_cp, id.vars=c("strata", "basin", "units", "yr", "sim"))
tt<-reshape2::melt(tmp_cp, id.vars=c("strata", "basin", "units", "yr", "sim"),variable_name = "var")
head(tt)
tt<-reshape2::melt(tmp_cp, id.vars=c("strata", "basin", "units", "yr", "sim"),variable_name = "var")
tt <- tt%>%dplyr::rename(val = value)
tt$long_name <- paste("cold pool as number of stations where",tt$variable)
names(tt)
match(names(tmp_var),names(tt))
names(tmp_var)
names(tt)
# get the strata average values:
tmp_var_mn <- tmp_var%>%
dplyr::group_by(strata,basin,units,yr,sim,long_name,var)%>%
dplyr::summarise(val= mean(val, na.rm=T),
date = mean(jday, na.rm=T))
match(names(tmp_var_mn),names(tt))
names(tmp_var_mn)
setdiff(names(tmp_var_mn),names(tt))
names(tt)
# get the strata average values:
tmp_cp <- tmp_var%>%
dplyr::filter(var =="temp_bottom5m")%>%
dplyr::group_by(strata,basin,units,yr,sim,long_name,var)%>%
dplyr::summarise(date = mean(jday, na.rm=T),
fracbelow200 =coldpool(val,200),
fracbelow2 =coldpool(val,2),
fracbelow1 =coldpool(val,1),
fracbelow0 =coldpool(val,0))%>%
dplyr::mutate(units ="")%>%ungroup()%>%
dplyr::select(strata,date, basin, units, yr, sim, fracbelow2, fracbelow1, fracbelow0)
tt<-reshape2::melt(tmp_cp, id.vars=c("strata","date", "basin", "units", "yr", "sim"))
tt <- tt%>%dplyr::rename(val = variable,val = value)
tt$long_name <- paste("cold pool as number of stations where",tt$variable)
# get the strata average values:
tmp_cp <- tmp_var%>%
dplyr::filter(var =="temp_bottom5m")%>%
dplyr::group_by(strata,basin,units,yr,sim,long_name,var)%>%
dplyr::summarise(date = mean(jday, na.rm=T),
fracbelow200 =coldpool(val,200),
fracbelow2 =coldpool(val,2),
fracbelow1 =coldpool(val,1),
fracbelow0 =coldpool(val,0))%>%
dplyr::mutate(units ="")%>%ungroup()%>%
dplyr::select(strata,date, basin, units, yr, sim, fracbelow2, fracbelow1, fracbelow0)
tt<-reshape2::melt(tmp_cp, id.vars=c("strata","date", "basin", "units", "yr", "sim"))
head(tt)
tt <- tt%>%dplyr::rename(var = variable,val = value)
tt$long_name <- paste("cold pool as number of stations where",tt$variable)
head(tt)
# get the strata average values:
tmp_var_mn <- tmp_var%>%
dplyr::group_by(strata,basin,units,yr,sim,long_name,var)%>%
dplyr::summarise(val= mean(val, na.rm=T),
date = mean(jday, na.rm=T))
setdiff(names(tmp_var_mn),names(tt))
setdiff(names(tt),names(tmp_var_mn))
match(names(tmp_var_mn),names(tt))
tt[,match(names(tmp_var_mn),names(tt))]
head(tt[,match(names(tmp_var_mn),names(tt))])
head(tmp_var_mn)
tmp_var_mn<- rbind(tmp_var_mn,tt[,match(names(tmp_var_mn),names(tt))])
head(tmp_cp)
source("~/Documents/GitHub/ACLIM2/R/sub_fun/make_indices_srvyrep_new.R")
rm(list=ls())
flush.console()
gc()
# --------------------------------------
# SETUP WORKSPACE
# setwd("Documents/GitHub/ACLIM2")
tmstp  <- format(Sys.time(), "%Y_%m_%d")
main   <- getwd()  #"~/GitHub_new/ACLIM2"
# loads packages, data, setup, etc.
suppressMessages(source("R/make.R"))
tmstamp1  <- format(Sys.time(), "%Y%m%d")
# tmstamp1  <- "20220428"
update_hind  <- TRUE   # set to true to update hind and hindS; needed annually
update_proj  <- TRUE   # set to true to update fut; not needed
update_hist  <- TRUE   # set to true to update fut; not needed
# the reference years for bias correcting in R/setup.R
ref_years
# the year to z-score scale / delta in R/setup.R
deltayrs
# remove these variables:
vl1 <- srvy_vars[!srvy_vars%in%c("station_id","latitude",
"longitude","stratum","doy",
"Iron_bottom5m","Iron_integrated",
"Iron_surface5m","prod_Eup_integrated",
"prod_NCa_integrated")]
vl2 <- weekly_vars[!weekly_vars%in%c("station_id","latitude",
"longitude","stratum","doy",
"Iron_bottom5m","Iron_integrated",
"Iron_surface5m","prod_Eup_integrated",
"prod_NCa_integrated")]
vl<-unique(c(vl1,vl2))
# add in largeZoop (gets generated in make_indices_region_new.R)
vl <- c(vl,"largeZoop_integrated")
# Identify which variables would be normally
# distributed (i.e., can have negative values)
normvl <- c("shflux","ssflux","temp_bottom5m",
"temp_integrated","temp_surface5m",
"uEast_bottom5m","uEast_surface5m",
"vNorth_bottom5m","vNorth_surface5m")
normlist <- data.frame(var = vl, lognorm = TRUE)
normlist$lognorm[normlist$var%in%normvl] <- FALSE
# generate indices and bias corrected projections
# This takes approx 30 mins each
gcmcmipL <- c("B10K-K20P19_CMIP6_miroc",
"B10K-K20P19_CMIP6_gfdl",
"B10K-K20P19_CMIP6_cesm")
CMIP6_Indices <- suppressMessages(
makeACLIM2_Indices(
BC_target = "mn_val",
hind_sim  =  "B10K-K20_CORECFS",
histLIST  = paste0(gcmcmipL,"_historical"),
gcmcmipLIST = gcmcmipL,
sim_listIN = sim_list[-grep("historical",sim_list)]))
if("CMIP6_Indices"%in%ls()){
save_indices(flIN = CMIP6_Indices,
subfl = "allEBS_means",
post_txt = "_mn",
CMIP_fdlr ="K20P19_CMIP6")
fl <- "Data/out/CMIP6_Indices_List.Rdata"
if(file.exists(fl)) file.remove(fl)
save(CMIP6_Indices, file = fl)
rm(CMIP6_Indices)
gc()
}
# CMIP5 K20P19
gcmcmipL2 <- c("B10K-K20P19_CMIP5_MIROC","B10K-K20P19_CMIP5_GFDL","B10K-K20P19_CMIP5_CESM")
CMIP5_K20_Indices <- suppressMessages(
makeACLIM2_Indices(
BC_target = "mn_val",
hind_sim  =  "B10K-K20_CORECFS",
histLIST  = paste0(gcmcmipL,"_historical"),
gcmcmipLIST = gcmcmipL2,
sim_listIN = sim_list[-grep("historical",sim_list)]))
if("CMIP5_K20_Indices"%in%ls()){
save_indices(flIN = CMIP5_K20_Indices,
subfl = "allEBS_means",
post_txt = "_mn",
CMIP_fdlr ="K20P19_CMIP5")
fl <- "Data/out/CMIP5_K20_Indices_List.Rdata"
if(file.exists(fl)) file.remove(fl)
save(CMIP5_K20_Indices, file = fl)
rm(CMIP5_K20_Indices)
gc()
}
# CMIP5 H16
gcmcmipL2 <- c("B10K-H16_CMIP5_MIROC","B10K-H16_CMIP5_GFDL","B10K-H16_CMIP5_CESM")
CMIP5_H16_Indices <- suppressMessages(
makeACLIM2_Indices(
BC_target = "mn_val",
hind_sim  =  "B10K-H16_CORECFS",
histLIST  = rep("B10K-H16_CORECFS",3),
gcmcmipLIST = gcmcmipL2,
sim_listIN = sim_list[-grep("historical",sim_list)]))
if("CMIP5_H16_Indices"%in%ls()){
save_indices(flIN = CMIP5_H16_Indices,
subfl = "allEBS_means",
post_txt = "_mn",
CMIP_fdlr ="H16_CMIP5")
fl <- "Data/out/CMIP5_H16_Indices_List.Rdata"
if(file.exists(fl)) file.remove(fl)
save(CMIP5_H16_Indices, file = fl)
rm(CMIP5_H16_Indices)
gc()
}
survey_vars
All of those are available
# --------------------------------------
# SETUP WORKSPACE
# setwd("Documents/GitHub/ACLIM2")
tmstp  <- format(Sys.time(), "%Y_%m_%d")
main   <- getwd()  #"~/GitHub_new/ACLIM2"
# loads packages, data, setup, etc.
suppressMessages(source("R/make.R"))
tmstamp1  <- format(Sys.time(), "%Y%m%d")
# tmstamp1  <- "20220428"
update_hind  <- TRUE   # set to true to update hind and hindS; needed annually
update_proj  <- TRUE   # set to true to update fut; not needed
update_hist  <- TRUE   # set to true to update fut; not needed
# the reference years for bias correcting in R/setup.R
ref_years
# the year to z-score scale / delta in R/setup.R
deltayrs
# remove these variables:
vl1 <- srvy_vars[!srvy_vars%in%c("station_id","latitude",
"longitude","stratum","doy",
"Iron_bottom5m","Iron_integrated",
"Iron_surface5m","prod_Eup_integrated",
"prod_NCa_integrated")]
vl2 <- weekly_vars[!weekly_vars%in%c("station_id","latitude",
"longitude","stratum","doy",
"Iron_bottom5m","Iron_integrated",
"Iron_surface5m","prod_Eup_integrated",
"prod_NCa_integrated")]
vl<-unique(c(vl1,vl2))
# add in largeZoop (gets generated in make_indices_region_new.R)
vl <- c(vl,"largeZoop_integrated")
# Identify which variables would be normally
# distributed (i.e., can have negative values)
normvl <- c("shflux","ssflux","temp_bottom5m",
"temp_integrated","temp_surface5m",
"uEast_bottom5m","uEast_surface5m",
"vNorth_bottom5m","vNorth_surface5m")
normlist <- data.frame(var = vl, lognorm = TRUE)
normlist$lognorm[normlist$var%in%normvl] <- FALSE
# generate indices and bias corrected projections
# This takes approx 30 mins each
gcmcmipL <- c("B10K-K20P19_CMIP6_miroc",
"B10K-K20P19_CMIP6_gfdl",
"B10K-K20P19_CMIP6_cesm")
attach(list(
BC_target = "mn_val",
hind_sim  =  "B10K-K20_CORECFS",
histLIST  = paste0(gcmcmipL,"_historical"),
gcmcmipLIST = gcmcmipL,
sim_listIN = sim_list[-grep("historical",sim_list)]))
# ------------------------------------
# 1  -- Create indices from Hindcast
cat("-- Starting analysis...\n")
# load the Hindcast:
# -------------------------
cat("-- making hindcast indices....\n")
#sim <- "B10K-K20_CORECFS"
sim  <- hind_sim
load(file.path(Rdata_path,file.path(sim,paste0(reg_txt,sim,".Rdata"))))
hnd       <- ACLIMregion; rm(ACLIMregion)
load(file.path(Rdata_path,file.path(sim,paste0(srvy_txt,sim,".Rdata"))))
hnd_srvy  <- ACLIMsurveyrep; rm(ACLIMsurveyrep)
gc()
head(hnd)
unique(hnd$var)
# set the workspace to your local ACLIM2 folder
# e.g., "/Users/kholsman/Documents/GitHub/ACLIM2"
# setwd( path.expand("~/Documents/GitHub/ACLIM2") )
# --------------------------------------
# SETUP WORKSPACE
tmstp  <- format(Sys.time(), "%Y_%m_%d")
main   <- getwd()  #"~/GitHub_new/ACLIM2"
# loads packages, data, setup, etc.
suppressWarnings(source("R/make.R"))
load("/Users/kholsman/Documents/GitHub/ACLIM2/Data/out/K20P19_CMIP6/allEBS_means/ACLIM_annual_hind_mn.Rdata")
ls()
head(ACLIM_annual_hind)
unique(ACLIM_annual_hind$var)
SEBS_strata
NEBS_strata
ggplot(data%>%filter(ACLIM_annual_hind$var=
"temp_bottom5m"))+geom_line(aes(x=mn_date,y=mn_var))
ggplot(data%>%filter(ACLIM_annual_hind$var=
"temp_bottom5m"))+geom_line(aes(x=mn_date,y=mn_var)))
ggplot(data%>%filter(ACLIM_annual_hind$var==
"temp_bottom5m"))+geom_line(aes(x=mn_date,y=mn_var))
ggplot(data%>%filter(ACLIM_annual_hind$var==
"temp_bottom5m")+geom_line(aes(x=mn_date,y=mn_var))
)
temp <- data%>%filter(ACLIM_annual_hind$var=="temp_bottom5m")
temp <- data%>%dplyr::filter(ACLIM_annual_hind$var=="temp_bottom5m")
temp <- data%>%dplyr::filter(var=="temp_bottom5m")
temp <- data%>%dplyr::filter(var=="temp_bottom5m")
temp <- ACLIM_annual_hind%>%dplyr::filter(var=="temp_bottom5m")
ggplot(temp)+geom_line(aes(x=mn_date,y=mn_val))+facet_wrap(.~basin)
ggplot(temp)+geom_line(aes(x=mnDate,y=mn_val))+facet_wrap(.~basin)
library(attach())
library(catchfunction)
catch_function(scenario=1, Arrowtooth = 1000)
catch_function(scenario=1, Arrowtooth = 1000)
catch_function(scenario=1, Arrowtooth = 1000)
catch_function(1, 1000)
catch_function(1, 1000)
catch_function(scenario =1, Rock = 4000)
catch_function(scenario =1, Rock = 4000)
catch_function(scenario =1, Rock = 4000)
catch_function(1, 1000)
catch_function(scenario =1, Rock = 4000)
catch_function(scenario =1, Rock = 4000000)
catch_function(scenario =1, Rock = 4000000)
catch_function(scenario =1, Rock = 4000000)
catch_function(1, Rock = 4000000)
catch_function(1, Rock = 4000000)
source("R/marke.R")
source("R/make.R")
traceback()
source("R/make.R")
traceback()
ls()
load("Data/out/K20P19_CMIP6/allEBS_means/ACLIM_annual_hind_mn.Rdata")
ggplot(ACLIM_annual_hind%>%dplyr::filter(var=="temp_bottom5m"))+geom_line(aes(x=mnDate,y=mn_val))+facet_wrap(.~basin)
getwd()
rm(list=ls())
source("R/make.R")
ls()
setwd()
dir()
getwd()
source("R/make.R")
traceback()
source("R/make.R")
#source("R/make.R")       # loads packages, data, setup, etc.
knitr::opts_chunk$set(echo = T, fig.align="center")
thisYr <- format(Sys.time(), "%Y")
today  <- format(Sys.time(), "%b %d, %Y")
# --------------------------------------
# SETUP WORKSPACE
tmstp  <- format(Sys.time(), "%Y_%m_%d")
main   <- getwd()  #"~/GitHub_new/ACLIM2"
# loads packages, data, setup, etc.
suppressWarnings(source("R/make.R"))
