write.csv(normlist,file = file.path(Rdata_path,"normlist.csv"))
save(weekly_vars,file   = "Data/out/weekly_vars.Rdata")
save(srvy_vars,file     = "Data/out/srvy_vars.Rdata")
write.csv(normlist,file = file.path("Data/out/","normlist.csv"))
# generate indices and bias corrected projections
# this takes about 30 mins each
gcmcmipL <- c("B10K-K20P19_CMIP6_miroc",
"B10K-K20P19_CMIP6_gfdl",
"B10K-K20P19_CMIP6_cesm")
)
attach(list(
bystrata  = FALSE,
BC_target = "mn_val",
CMIP_fdlr ="K20P19_CMIP6",
scenIN    = c("ssp126","ssp585"),
hind_sim  =  "B10K-K20P19_CORECFS",
histLIST  = paste0(gcmcmipL,"_historical"),
gcmcmipLIST = gcmcmipL,
usehist   = TRUE,
Rdata_pathIN = file.path(Rdata_path,"roms_for_public"),
regnm     = "ACLIMregion",
srvynm    = "ACLIMsurveyrep",
normlist_IN = normlist,
sim_listIN = sim_list[-grep("historical",sim_list)],
gcinfoIN = FALSE))
reg_txtIN  = paste0("Level3/",regnm,"_")
srvy_txtIN = paste0("Level3/",srvynm,"_")
gcinfo(gcinfoIN)
# ------------------------------------
# 1  -- Create indices from Hindcast
cat("-- Starting analysis...\n")
# load the Hindcast:
# -------------------------
cat("-- making hindcast indices....\n")
sim  <- hind_sim
if(is.null(sv)){
sv <- unique(hnd_srvy$var)
svout <- "allvar"
}else{
svout <- sv
}
if(bystrata) {
load(file.path(Rdata_pathIN,file.path(sim,paste0(reg_txtIN,sim,".Rdata"))))
eval(parse(text=paste0("hnd       <- ",regnm,"; rm(",regnm,")")))
if(is.null(sv))
sv <- unique(hnd$var)
}else{
load(file.path(Rdata_pathIN,file.path(sim,paste0(srvy_txtIN,sim,".Rdata"))))
eval(parse(text=paste0("hnd_srvy  <- ",srvynm,"; rm(",srvynm,")")))
}
# Get Indices:
# -------------------------
if(!bystrata){  # get survey replicated
cat("    -- get srvy_indices_hind ... \n")
srvy_station_indices_hind  <-  make_indices_srvyrep_station(simIN = hnd_srvy,
seasonsIN   = seasons,
type        = "station replicated")
rm(list=c("hnd_srvy"))
}else{
# area weekly means for each strata
cat("    -- get strata_indices_weekly_hind ...\n")
# strata_indices_weekly_hind
hindA <-make_indices_strata(
simIN = hnd,
svIN = sv,
timeblockIN = c("strata","strata_area_km2",
"yr","season","mo","wk"),
seasonsIN   = seasons,
type        = "strata weekly means",
typeIN     =  "hind", #"hist" "proj"
ref_yrs    = 1980:2013,
normlistIN = normlist_IN,
group_byIN = c("var","lognorm","basin","strata","strata_area_km2","season","mo","wk"),
smoothIT     = smoothIT,
log_adj    = 1e-4)
mn_hind <- hindA$datout%>%rename(
mnVal_hind = mnVal_x,
sdVal_hind    = sdVal_x,
nVal_hind = nVal_x,
seVal_hind  = seVal_x,
sdVal_hind_mo = sdVal_x_mo,
sdVal_hind_yr = sdVal_x_yr)
# mnLNVal_hind = mnLNVal_x,
# sdLNVal_hind = sdLNVal_x,
# nLNVal_hind = nLNVal_x,
# sdLNVal_hind_mo = sdLNVal_x_mo,
# sdLNVal_hind_yr = sdLNVal_x_yr)
hindIN    <- hindA$datIN%>%rename(
mnVal_hind = mnVal_x,
sdVal_hind = sdVal_x,
nVal_hind = nVal_x,
seVal_hind    = seVal_x,
sdVal_hind_mo = sdVal_x_mo,
sdVal_hind_yr = sdVal_x_yr)
# nLNVal_hind    = nLNVal_x,
# mnLNVal_hind = mnLNVal_x,
# sdLNVal_hind = sdLNVal_x,
# sdLNVal_hind_mo = sdLNVal_x_mo,
# sdLNVal_hind_yr = sdLNVal_x_yr)
#save in temporary file:
if(dir.exists("data/out/tmp"))
dir.remove("data/out/tmp")
dir.create("data/out/tmp")
save(hindIN,file="data/out/tmp/hindIN.Rdata")
rm(list=c("hnd","hindA","hindIN"))
}
tmstp       <- "2022_10_17"
suppressMessages(source("R/make.R"))
tmstp       <- "2022_10_17"
Rdata_path  <- paste0("../../romsnpz/",tmstp,"_Rdata")
main        <- getwd()  #"~/GitHub_new/ACLIM2"
tmstamp1    <- format(Sys.time(), "%Y%m%d")
# tmstamp1  <- "20220428"
update_hind  <- TRUE   # set to true to update hind and hindS; needed annually
update_proj  <- TRUE   # set to true to update fut; not needed
update_hist  <- TRUE   # set to true to update fut; not needed
# the reference years for bias correcting in R/setup.R
ref_years
# the year to z-score scale / delta in R/setup.R
deltayrs
data_path
#load(file.path(Rdata_path,"../weekly_vars_C.Rdata"))
load(file.path(Rdata_path,"weekly_vars.Rdata"))
#load(file.path(Rdata_path,"../srvy_vars_C.Rdata"))
load(file.path(Rdata_path,"srvy_vars.Rdata"))
load(file.path(Rdata_path,"l3srvy_varlist.Rdata"))
load(file.path(Rdata_path,"l3wk_varlist.Rdata"))
load(file.path(Rdata_path,"l3srvy_varlist_H16.Rdata"))
load(file.path(Rdata_path,"l3wk_varlist_H16.Rdata"))
load(file.path(Rdata_path,"l2_vars.Rdata"))
vl1   <- l3srvy_varlist #srvy_vars[!srvy_vars%in%rm_var_list]
vl2   <- l3wk_varlist# weekly_vars[!weekly_vars%in%rm_wk_list]
# add in largeZoop (gets generated in make_indices_region_new.R)
vl <- c(unique(c(vl1,vl2)),"largeZoop_integrated")
# Identify which variables would be normally
# distributed (i.e., can have negative values)
normvl <- c( vl[grep("pH",vl)],
vl[grep("temp",vl)],
vl[grep("vNorth",vl)],
vl[grep("uEast",vl)])
normlist <- data.frame(var = vl, lognorm = "log")
normlist$lognorm[normlist$var%in%
c( vl[grep("pH",vl)],
vl[grep("temp",vl)],
vl[grep("vNorth",vl)],
vl[grep("uEast",vl)])]   <- "none"
normlist$lognorm[normlist$var%in%
c( vl[grep("aice",vl)],
vl[grep("fracbelow0",vl)],
vl[grep("fracbelow1",vl)],
vl[grep("fracbelow2",vl)])]  <- "logit"
save(normlist,file      = file.path(Rdata_path,"normlist.Rdata"))
write.csv(normlist,file = file.path(Rdata_path,"normlist.csv"))
save(weekly_vars,file   = "Data/out/weekly_vars.Rdata")
save(srvy_vars,file     = "Data/out/srvy_vars.Rdata")
write.csv(normlist,file = file.path("Data/out/","normlist.csv"))
# generate indices and bias corrected projections
# this takes about 30 mins each
gcmcmipL <- c("B10K-K20P19_CMIP6_miroc",
"B10K-K20P19_CMIP6_gfdl",
"B10K-K20P19_CMIP6_cesm")
attach(list(
bystrata  = FALSE,
BC_target = "mn_val",
CMIP_fdlr ="K20P19_CMIP6",
scenIN    = c("ssp126","ssp585"),
hind_sim  =  "B10K-K20P19_CORECFS",
histLIST  = paste0(gcmcmipL,"_historical"),
gcmcmipLIST = gcmcmipL,
usehist   = TRUE,
Rdata_pathIN = file.path(Rdata_path,"roms_for_public"),
regnm     = "ACLIMregion",
srvynm    = "ACLIMsurveyrep",
normlist_IN = normlist,
sim_listIN = sim_list[-grep("historical",sim_list)],
gcinfoIN = FALSE))
sv<-"aice"
reg_txtIN  = paste0("Level3/",regnm,"_")
srvy_txtIN = paste0("Level3/",srvynm,"_")
gcinfo(gcinfoIN)
# ------------------------------------
# 1  -- Create indices from Hindcast
cat("-- Starting analysis...\n")
# load the Hindcast:
# -------------------------
cat("-- making hindcast indices....\n")
sim  <- hind_sim
if(is.null(sv)){
sv <- unique(hnd_srvy$var)
svout <- "allvar"
}else{
svout <- sv
}
if(bystrata) {
load(file.path(Rdata_pathIN,file.path(sim,paste0(reg_txtIN,sim,".Rdata"))))
eval(parse(text=paste0("hnd       <- ",regnm,"; rm(",regnm,")")))
if(is.null(sv))
sv <- unique(hnd$var)
}else{
load(file.path(Rdata_pathIN,file.path(sim,paste0(srvy_txtIN,sim,".Rdata"))))
eval(parse(text=paste0("hnd_srvy  <- ",srvynm,"; rm(",srvynm,")")))
}
# Get Indices:
# -------------------------
if(!bystrata){  # get survey replicated
cat("    -- get srvy_indices_hind ... \n")
srvy_station_indices_hind  <-  make_indices_srvyrep_station(simIN = hnd_srvy,
seasonsIN   = seasons,
type        = "station replicated")
rm(list=c("hnd_srvy"))
}else{
# area weekly means for each strata
cat("    -- get strata_indices_weekly_hind ...\n")
# strata_indices_weekly_hind
hindA <-make_indices_strata(
simIN = hnd,
svIN = sv,
timeblockIN = c("strata","strata_area_km2",
"yr","season","mo","wk"),
seasonsIN   = seasons,
type        = "strata weekly means",
typeIN     =  "hind", #"hist" "proj"
ref_yrs    = 1980:2013,
normlistIN = normlist_IN,
group_byIN = c("var","lognorm","basin","strata","strata_area_km2","season","mo","wk"),
smoothIT     = smoothIT,
log_adj    = 1e-4)
mn_hind <- hindA$datout%>%rename(
mnVal_hind = mnVal_x,
sdVal_hind    = sdVal_x,
nVal_hind = nVal_x,
seVal_hind  = seVal_x,
sdVal_hind_mo = sdVal_x_mo,
sdVal_hind_yr = sdVal_x_yr)
# mnLNVal_hind = mnLNVal_x,
# sdLNVal_hind = sdLNVal_x,
# nLNVal_hind = nLNVal_x,
# sdLNVal_hind_mo = sdLNVal_x_mo,
# sdLNVal_hind_yr = sdLNVal_x_yr)
hindIN    <- hindA$datIN%>%rename(
mnVal_hind = mnVal_x,
sdVal_hind = sdVal_x,
nVal_hind = nVal_x,
seVal_hind    = seVal_x,
sdVal_hind_mo = sdVal_x_mo,
sdVal_hind_yr = sdVal_x_yr)
# nLNVal_hind    = nLNVal_x,
# mnLNVal_hind = mnLNVal_x,
# sdLNVal_hind = sdLNVal_x,
# sdLNVal_hind_mo = sdLNVal_x_mo,
# sdLNVal_hind_yr = sdLNVal_x_yr)
#save in temporary file:
if(dir.exists("data/out/tmp"))
dir.remove("data/out/tmp")
dir.create("data/out/tmp")
save(hindIN,file="data/out/tmp/hindIN.Rdata")
rm(list=c("hnd","hindA","hindIN"))
}
# ------------------------------------
# 2  -- loop across GCMs and create historical run indices
# pg <- paste("[",rep(" ",60),"]")
# bar<- 60/length(gcmcmipLIST)
#
i  <- 0
ii <- 1
sv
if(bystrata) {
load(file.path(Rdata_pathIN,file.path(sim,paste0(reg_txtIN,sim,".Rdata"))))
eval(parse(text=paste0("hnd       <- ",regnm,"; rm(",regnm,")")))
if(is.null(sv))
sv <- unique(hnd$var)
}else{
load(file.path(Rdata_pathIN,file.path(sim,paste0(srvy_txtIN,sim,".Rdata"))))
eval(parse(text=paste0("hnd_srvy  <- ",srvynm,"; rm(",srvynm,")")))
}
if(!bystrata){  # get survey replicated
cat("    -- get srvy_indices_hind ... \n")
srvy_station_indices_hind  <-  make_indices_srvyrep_station(simIN = hnd_srvy,
seasonsIN   = seasons,
type        = "station replicated")
rm(list=c("hnd_srvy"))
}else{
# area weekly means for each strata
cat("    -- get strata_indices_weekly_hind ...\n")
# strata_indices_weekly_hind
hindA <-make_indices_strata(
simIN = hnd,
svIN = sv,
timeblockIN = c("strata","strata_area_km2",
"yr","season","mo","wk"),
seasonsIN   = seasons,
type        = "strata weekly means",
typeIN     =  "hind", #"hist" "proj"
ref_yrs    = 1980:2013,
normlistIN = normlist_IN,
group_byIN = c("var","lognorm","basin","strata","strata_area_km2","season","mo","wk"),
smoothIT     = smoothIT,
log_adj    = 1e-4)
mn_hind <- hindA$datout%>%rename(
mnVal_hind = mnVal_x,
sdVal_hind    = sdVal_x,
nVal_hind = nVal_x,
seVal_hind  = seVal_x,
sdVal_hind_mo = sdVal_x_mo,
sdVal_hind_yr = sdVal_x_yr)
# mnLNVal_hind = mnLNVal_x,
# sdLNVal_hind = sdLNVal_x,
# nLNVal_hind = nLNVal_x,
# sdLNVal_hind_mo = sdLNVal_x_mo,
# sdLNVal_hind_yr = sdLNVal_x_yr)
hindIN    <- hindA$datIN%>%rename(
mnVal_hind = mnVal_x,
sdVal_hind = sdVal_x,
nVal_hind = nVal_x,
seVal_hind    = seVal_x,
sdVal_hind_mo = sdVal_x_mo,
sdVal_hind_yr = sdVal_x_yr)
# nLNVal_hind    = nLNVal_x,
# mnLNVal_hind = mnLNVal_x,
# sdLNVal_hind = sdLNVal_x,
# sdLNVal_hind_mo = sdLNVal_x_mo,
# sdLNVal_hind_yr = sdLNVal_x_yr)
#save in temporary file:
if(dir.exists("data/out/tmp"))
dir.remove("data/out/tmp")
dir.create("data/out/tmp")
save(hindIN,file="data/out/tmp/hindIN.Rdata")
rm(list=c("hnd","hindA","hindIN"))
}
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
if(!bystrata){  # get survey replicated
cat("    -- get srvy_indices_hind ... \n")
srvy_station_indices_hind  <-  make_indices_srvyrep_station(simIN = hnd_srvy,
seasonsIN   = seasons,
type        = "station replicated")
rm(list=c("hnd_srvy"))
}else{
# area weekly means for each strata
cat("    -- get strata_indices_weekly_hind ...\n")
# strata_indices_weekly_hind
hindA <-make_indices_strata(
simIN = hnd,
svIN = sv,
timeblockIN = c("strata","strata_area_km2",
"yr","season","mo","wk"),
seasonsIN   = seasons,
type        = "strata weekly means",
typeIN     =  "hind", #"hist" "proj"
ref_yrs    = 1980:2013,
normlistIN = normlist_IN,
group_byIN = c("var","lognorm","basin","strata","strata_area_km2","season","mo","wk"),
smoothIT     = smoothIT,
log_adj    = 1e-4)
mn_hind <- hindA$datout%>%rename(
mnVal_hind = mnVal_x,
sdVal_hind    = sdVal_x,
nVal_hind = nVal_x,
seVal_hind  = seVal_x,
sdVal_hind_mo = sdVal_x_mo,
sdVal_hind_yr = sdVal_x_yr)
# mnLNVal_hind = mnLNVal_x,
# sdLNVal_hind = sdLNVal_x,
# nLNVal_hind = nLNVal_x,
# sdLNVal_hind_mo = sdLNVal_x_mo,
# sdLNVal_hind_yr = sdLNVal_x_yr)
hindIN    <- hindA$datIN%>%rename(
mnVal_hind = mnVal_x,
sdVal_hind = sdVal_x,
nVal_hind = nVal_x,
seVal_hind    = seVal_x,
sdVal_hind_mo = sdVal_x_mo,
sdVal_hind_yr = sdVal_x_yr)
# nLNVal_hind    = nLNVal_x,
# mnLNVal_hind = mnLNVal_x,
# sdLNVal_hind = sdLNVal_x,
# sdLNVal_hind_mo = sdLNVal_x_mo,
# sdLNVal_hind_yr = sdLNVal_x_yr)
#save in temporary file:
if(dir.exists("data/out/tmp"))
dir.remove("data/out/tmp")
dir.create("data/out/tmp")
save(hindIN,file="data/out/tmp/hindIN.Rdata")
rm(list=c("hnd","hindA","hindIN"))
}
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
sv
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
reg_txtIN  = paste0("Level3/",regnm,"_")
srvy_txtIN = paste0("Level3/",srvynm,"_")
gcinfo(gcinfoIN)
# ------------------------------------
# 1  -- Create indices from Hindcast
cat("-- Starting analysis...\n")
# load the Hindcast:
# -------------------------
cat("-- making hindcast indices....\n")
sim  <- hind_sim
if(is.null(sv)){
sv <- unique(hnd_srvy$var)
svout <- "allvar"
}else{
svout <- sv
}
if(bystrata) {
load(file.path(Rdata_pathIN,file.path(sim,paste0(reg_txtIN,sim,".Rdata"))))
eval(parse(text=paste0("hnd       <- ",regnm,"; rm(",regnm,")")))
if(is.null(sv))
sv <- unique(hnd$var)
}else{
load(file.path(Rdata_pathIN,file.path(sim,paste0(srvy_txtIN,sim,".Rdata"))))
eval(parse(text=paste0("hnd_srvy  <- ",srvynm,"; rm(",srvynm,")")))
}
# Get Indices:
# -------------------------
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
sub <- tmp_var%>%filter(strata==tmpstrata[b],var==tmpvar[b])
sub$mnVal_x   <- getgam(x =sub$wk, y = sub$mnVal_x)
sub$sdVal_x   <- getgam(x =sub$wk, y = sub$sdVal_x)
sub$seVal_x   <- getgam(x =sub$wk, y = sub$seVal_x)
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
hindA$datin
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
?mutate_at
inv.logit(1.67-.22)
inv.logit(1.67+.22)
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
exp(.2)
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/save_indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
if(dir.exists("data/out/tmp"))
dir.remove("data/out/tmp")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
