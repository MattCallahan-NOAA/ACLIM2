sdVal_hind = sdVal_x,
nVal_hind = nVal_x,
seVal_hind    = seVal_x,
sdVal_hind_mo = sdVal_x_mo,
sdVal_hind_yr = sdVal_x_yr)
# nLNVal_hind    = nLNVal_x,
# mnLNVal_hind = mnLNVal_x,
# sdLNVal_hind = sdLNVal_x,
# sdLNVal_hind_mo = sdLNVal_x_mo,
# sdLNVal_hind_yr = sdLNVal_x_yr)
#save in temporary file:
if(dir.exists("data/out/tmp"))
dir.remove("data/out/tmp")
dir.create("data/out/tmp")
save(hindIN,file="data/out/tmp/hindIN.Rdata")
rm(list=c("hnd","hindA","hindIN"))
}
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
if(!bystrata){  # get survey replicated
cat("    -- get srvy_indices_hind ... \n")
srvy_station_indices_hind  <-  make_indices_srvyrep_station(simIN = hnd_srvy,
seasonsIN   = seasons,
type        = "station replicated")
rm(list=c("hnd_srvy"))
}else{
# area weekly means for each strata
cat("    -- get strata_indices_weekly_hind ...\n")
# strata_indices_weekly_hind
hindA <-make_indices_strata(
simIN = hnd,
svIN = sv,
timeblockIN = c("strata","strata_area_km2",
"yr","season","mo","wk"),
seasonsIN   = seasons,
type        = "strata weekly means",
typeIN     =  "hind", #"hist" "proj"
ref_yrs    = 1980:2013,
normlistIN = normlist_IN,
group_byIN = c("var","lognorm","basin","strata","strata_area_km2","season","mo","wk"),
smoothIT     = smoothIT,
log_adj    = 1e-4)
mn_hind <- hindA$datout%>%rename(
mnVal_hind = mnVal_x,
sdVal_hind    = sdVal_x,
nVal_hind = nVal_x,
seVal_hind  = seVal_x,
sdVal_hind_mo = sdVal_x_mo,
sdVal_hind_yr = sdVal_x_yr)
# mnLNVal_hind = mnLNVal_x,
# sdLNVal_hind = sdLNVal_x,
# nLNVal_hind = nLNVal_x,
# sdLNVal_hind_mo = sdLNVal_x_mo,
# sdLNVal_hind_yr = sdLNVal_x_yr)
hindIN    <- hindA$datIN%>%rename(
mnVal_hind = mnVal_x,
sdVal_hind = sdVal_x,
nVal_hind = nVal_x,
seVal_hind    = seVal_x,
sdVal_hind_mo = sdVal_x_mo,
sdVal_hind_yr = sdVal_x_yr)
# nLNVal_hind    = nLNVal_x,
# mnLNVal_hind = mnLNVal_x,
# sdLNVal_hind = sdLNVal_x,
# sdLNVal_hind_mo = sdLNVal_x_mo,
# sdLNVal_hind_yr = sdLNVal_x_yr)
#save in temporary file:
if(dir.exists("data/out/tmp"))
dir.remove("data/out/tmp")
dir.create("data/out/tmp")
save(hindIN,file="data/out/tmp/hindIN.Rdata")
rm(list=c("hnd","hindA","hindIN"))
}
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
sv
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
reg_txtIN  = paste0("Level3/",regnm,"_")
srvy_txtIN = paste0("Level3/",srvynm,"_")
gcinfo(gcinfoIN)
# ------------------------------------
# 1  -- Create indices from Hindcast
cat("-- Starting analysis...\n")
# load the Hindcast:
# -------------------------
cat("-- making hindcast indices....\n")
sim  <- hind_sim
if(is.null(sv)){
sv <- unique(hnd_srvy$var)
svout <- "allvar"
}else{
svout <- sv
}
if(bystrata) {
load(file.path(Rdata_pathIN,file.path(sim,paste0(reg_txtIN,sim,".Rdata"))))
eval(parse(text=paste0("hnd       <- ",regnm,"; rm(",regnm,")")))
if(is.null(sv))
sv <- unique(hnd$var)
}else{
load(file.path(Rdata_pathIN,file.path(sim,paste0(srvy_txtIN,sim,".Rdata"))))
eval(parse(text=paste0("hnd_srvy  <- ",srvynm,"; rm(",srvynm,")")))
}
# Get Indices:
# -------------------------
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
sub <- tmp_var%>%filter(strata==tmpstrata[b],var==tmpvar[b])
sub$mnVal_x   <- getgam(x =sub$wk, y = sub$mnVal_x)
sub$sdVal_x   <- getgam(x =sub$wk, y = sub$sdVal_x)
sub$seVal_x   <- getgam(x =sub$wk, y = sub$seVal_x)
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
hindA$datin
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/make_indices_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
?mutate_at
inv.logit(1.67-.22)
inv.logit(1.67+.22)
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
exp(.2)
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/bias_correct_new_strata.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/save_indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
if(dir.exists("data/out/tmp"))
dir.remove("data/out/tmp")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
source("D:/GitHub_cloud/ACLIM2/R/sub_fun/makeACLIM2_BC_Indices.R")
CMIP_fdlr
if(!dir.exists(file.path("Data/out",cmipfldr,"bc_mnVals")))
dir.create(file.path("Data/out",cmipfldr,"bc_mnVals"))
gcmcmip<-gcmcmipL[1]
cmipfldr <- "K20P19_CMIP6"
gcmcmipL <- c("B10K-K20P19_CMIP6_miroc",
"B10K-K20P19_CMIP6_gfdl",
"B10K-K20P19_CMIP6_cesm")
gcmcmip<-gcmcmipL[1]
gcmcmip
(strsplit(gcmcmip,"_")[[1]])
(strsplit(gcmcmip,"_")[[1]])[1]
strsplit(gcmcmip,"_")[[1]][2]
strsplit(gcmcmip,"_")[[1]][3]
gcmcmip
date()
time()
as.Date(date())
as.Date("1982-04-23")
exp(rnorm(200,0, .4))
inv.logit(rnorm(200,0, .4))
suppressMessages( suppressWarnings(source("R/make.R")))
inv.logit(rnorm(200,0, .4))
liz_dat <- data.frame(var ="aice",
val = inv.logit(rnorm(200,0, .4)),
strata = 70,
cell = 1:200,
date = as.Date("1982-04-23"))
date_fun()
date_fun <-function(x,type="yr"){
if(type=="yr")
return(x$year+1900)
if(type=="mo")
return(x$mon+1)
if(type=="jday")
return(x$yday+1)
if(type=="wk")
return(as.numeric(format(x, "%W"))+1)
if(type=="season")
return(seasonsIN[x$mon+1,2])
}
getgam <- function ( x =sub$wk, y = sub$mnVal_x, kin = .8){
df <- na.omit(data.frame(x,y))
nobs <- length(unique(df$x))
if(dim(df)[1]>2){
Gam   <- mgcv::gam( y ~ 1 + s(x, k=round(nobs*kin),bs= "cc"),data=df)
out <- as.numeric(predict(Gam, newdata=data.frame(x=x), se.fit=FALSE ))
}else{
out<- y
}
return(out)
}
seasons
# 1 -- create .dat filename & path
# -------------------------------------
suppressMessages(source("R/make.R"))
# switches
thisYr <- format(Sys.time(), "%Y")
today  <- format(Sys.time(), "%b %d, %Y")
lastyr_hind <- as.numeric(thisYr)  #2021
hind_yrs    <- 1979:lastyr_hind   # define the years of your estimation model
fut_yrs     <- (lastyr_hind+1):2100   # define the years of your projections
log_adj     <- 1e-4
plotbasin   <- "SEBS"
# Define the name for the .dat file
file.name   <- "ACLIM2_CMIP6_short"
fn          <- paste(file.name,"_bcs.dat",sep="")
archive_old <- T  # Archive the older version of the .dat file?
normlist    <- read.csv(file=file.path(Rdata_path,"../normlist.csv"))
outpath     <- "Data/out/ADMB_datfiles"
if(!dir.exists(outpath)) dir.create(outpath)
# 1 -- create .dat filename & path
# -------------------------------------
suppressMessages(source("R/make.R"))
# switches
thisYr <- format(Sys.time(), "%Y")
today  <- format(Sys.time(), "%b %d, %Y")
lastyr_hind <- as.numeric(thisYr)  #2021
hind_yrs    <- 1979:lastyr_hind   # define the years of your estimation model
fut_yrs     <- (lastyr_hind+1):2100   # define the years of your projections
log_adj     <- 1e-4
plotbasin   <- "SEBS"
# Define the name for the .dat file
file.name   <- "ACLIM2_CMIP6_short"
fn          <- paste(file.name,"_bcs.dat",sep="")
archive_old <- T  # Archive the older version of the .dat file?
normlist    <- read.csv(file=file.path(Rdata_path,"../normlist.csv"))
outpath     <- "Data/out/ADMB_datfiles"
if(!dir.exists(outpath)) dir.create(outpath)
# define hind and fut data files
fndat_hind  <- file.path(outpath,paste("KKHhind_",fn,sep=""))
fndat_fut   <- file.path(outpath,paste("KKHfut_",fn,sep=""))
fndat_hind2 <- file.path(outpath,paste("hind_",fn,sep=""))
fndat_fut2  <- file.path(outpath,paste("fut_",fn,sep=""))
# create and archive .dat files
outfile    <- fndat_fut
if(file.exists(outfile)&archive_old){
# archive older version
archivefl <- paste0(substr(outfile,start=1,stop=nchar(outfile)-4),
format(Sys.time(), "%Y%m%d_%H%M%S"),".dat")
file.rename(outfile, archivefl)
#file.remove(outfile)
}
file.create(outfile)
outfile  <- fndat_hind
if(file.exists(outfile)&archive_old){
# archive older version
archivefl <- paste0(substr(outfile,start=1,stop=nchar(outfile)-4),
format(Sys.time(), "%Y%m%d_%H%M%S"),".dat")
file.rename(outfile, archivefl)
#file.remove(outfile)
}
file.create(outfile)
fn
fndat_fut2
(file.exists(outfile)&archive_old)
outfile
file.create(outfile)
dir("Data/out")
dir("Data/out/ADMB_datfiles")
outfile
dir("Data/out/ADMB_datfiles")
file.create(outfile)
CMIPS <- c("K20P19_CMIP6","K20P19_CMIP5")
# preview possible variables
load(paste0("Data/out/",CMIPS[1],"/allEBS_means/ACLIM_annual_hind_mn.Rdata"))
varall  <- unique(ACLIM_annual_hind$var)
varall
die("Data/out/K20P19_CMIP6")
dir("Data/out/K20P19_CMIP6")
dir("Data/out/K20P19_CMIP6/allEBS_means")
# preview possible variables
load(paste0("Data/out/",CMIPS[1],"/allEBS_means/ACLIM_annual_hind_mn.Rdata"))
suppressMessages(source("R/make.R"))
# switches
thisYr <- format(Sys.time(), "%Y")
today  <- format(Sys.time(), "%b %d, %Y")
lastyr_hind <- 2019 #as.numeric(thisYr)  #2021
hind_yrs    <- 1979:lastyr_hind   # define the years of your estimation model
fut_yrs     <- (lastyr_hind+1):2100   # define the years of your projections
log_adj     <- 1e-4
zscore_years <- 1980:2010  # years to recenter z score on
plotbasin   <- "SEBS"
# Define the name for the .dat file
file.name   <- "ACLIM2_CMIP6_short"
fn          <- paste(file.name,"_bcs.dat",sep="")
archive_old <- T  # Archive the older version of the .dat file?
normlist    <- read.csv(file=file.path(Rdata_path,"../normlist.csv"))
outpath     <- "Data/out/ADMB_datfiles"
if(!dir.exists(outpath)) dir.create(outpath)
# define hind and fut data files
fndat_hind  <- file.path(outpath,paste("KKHhind_",fn,sep=""))
fndat_fut   <- file.path(outpath,paste("KKHfut_",fn,sep=""))
fndat_hind2 <- file.path(outpath,paste("hind_",fn,sep=""))
fndat_fut2  <- file.path(outpath,paste("fut_",fn,sep=""))
# create and archive .dat files
outfile    <- fndat_fut
if(file.exists(outfile)&archive_old){
# archive older version
archivefl <- paste0(substr(outfile,start=1,stop=nchar(outfile)-4),
format(Sys.time(), "%Y%m%d_%H%M%S"),".dat")
file.rename(outfile, archivefl)
#file.remove(outfile)
}
file.create(outfile)
outfile  <- fndat_hind
if(file.exists(outfile)&archive_old){
# archive older version
archivefl <- paste0(substr(outfile,start=1,stop=nchar(outfile)-4),
format(Sys.time(), "%Y%m%d_%H%M%S"),".dat")
file.rename(outfile, archivefl)
#file.remove(outfile)
}
file.create(outfile)
# 2 -- rescale (Z-score) data and get variables
# CMIPS <- c("K20P19_CMIP6","K20P19_CMIP5")
# CMIPS <- c("K20P19_CMIP6_C")
CMIPS <- c("K20P19_CMIP6","K20P19_CMIP5")
CMIPS <- c("K20P19_CMIP6")
# preview possible variables
load(paste0("Data/out/",CMIPS[1],"/allEBS_means/ACLIM_annual_hind_mn.Rdata"))
varall  <- unique(ACLIM_annual_hind$var)
varall
# get each variable, convert to TS and rbind
c<-1
suppressMessages(source("R/make.R"))
# switches
thisYr <- format(Sys.time(), "%Y")
today  <- format(Sys.time(), "%b %d, %Y")
lastyr_hind <- 2019 #as.numeric(thisYr)  #2021
hind_yrs    <- 1979:lastyr_hind   # define the years of your estimation model
fut_yrs     <- (lastyr_hind+1):2100   # define the years of your projections
log_adj     <- 1e-4
zscore_years <- 1980:2010  # years to recenter z score on
plotbasin   <- "SEBS"
# Define the name for the .dat file
file.name   <- "ACLIM2_CMIP6_short"
fn          <- paste(file.name,"_bcs.dat",sep="")
archive_old <- T  # Archive the older version of the .dat file?
normlist    <- read.csv(file=file.path(Rdata_path,"../normlist.csv"))
outpath     <- "Data/out/ADMB_datfiles"
if(!dir.exists(outpath)) dir.create(outpath)
# define hind and fut data files
fndat_hind  <- file.path(outpath,paste("KKHhind_",fn,sep=""))
fndat_fut   <- file.path(outpath,paste("KKHfut_",fn,sep=""))
fndat_hind2 <- file.path(outpath,paste("hind_",fn,sep=""))
fndat_fut2  <- file.path(outpath,paste("fut_",fn,sep=""))
# create and archive .dat files
outfile    <- fndat_fut
if(file.exists(outfile)&archive_old){
# archive older version
archivefl <- paste0(substr(outfile,start=1,stop=nchar(outfile)-4),
format(Sys.time(), "%Y%m%d_%H%M%S"),".dat")
file.rename(outfile, archivefl)
#file.remove(outfile)
}
file.create(outfile)
outfile  <- fndat_hind
if(file.exists(outfile)&archive_old){
# archive older version
archivefl <- paste0(substr(outfile,start=1,stop=nchar(outfile)-4),
format(Sys.time(), "%Y%m%d_%H%M%S"),".dat")
file.rename(outfile, archivefl)
#file.remove(outfile)
}
file.create(outfile)
# 2 -- rescale (Z-score) data and get variables
# CMIPS <- c("K20P19_CMIP6","K20P19_CMIP5")
# CMIPS <- c("K20P19_CMIP6_C")
CMIPS <- c("K20P19_CMIP6","K20P19_CMIP5")
CMIPS <- c("K20P19_CMIP6")
# preview possible variables
load(paste0("Data/out/",CMIPS[1],"/allEBS_means/ACLIM_annual_hind_mn.Rdata"))
varall  <- unique(ACLIM_annual_hind$var)
varall
# get each variable, convert to TS and rbind
c<-1
head(dfut)
cat(CMIPS[c], "\n")
# first for annual mean values:
varlist <- c("largeZoop_integrated","fracbelow2",
"temp_bottom5m","temp_surface5m","pH_depthavg")
varlist <- c("largeZoop_integrated","fracbelow2",
"temp_bottom5m","temp_surface5m","pH_depthavg")
# norm_sub <- normlist%>%filter(var%in%varlist)
typeIN <- "annual"
load(paste0("Data/out/",CMIPS[c],"/allEBS_means/ACLIM_",typeIN,"_hind_mn.Rdata"))
load(paste0("Data/out/",CMIPS[c],"/allEBS_means/ACLIM_",typeIN,"_fut_mn.Rdata"))
eval(parse(text = paste0("dhind <- ACLIM_",typeIN,"_hind")))
eval(parse(text = paste0("dfut  <- ACLIM_",typeIN,"_fut")))
# Z-score the data
mn<-dhind%>%
dplyr::filter(var%in%varlist,basin==plotbasin,
year%in%zscore_years)%>%
group_by(var,basin,lognorm)%>%
summarize(sdhind =sd(mn_val,na.rm=T),
mnhind =mean(mn_val,na.rm=T),
logsdhind =sd(log(mn_val+log_adj),na.rm=T),
logmnhind =mean(log(mn_val+log_adj),na.rm=T))%>%
mutate(sfmn = -mnhind/sdhind)
tmphind    <- suppressWarnings(dhind%>%left_join(mn)%>%
dplyr::filter(var%in%varlist,basin==plotbasin,year%in%hind_yrs)%>%
dplyr::select(var,basin,year,mnDate,mn_val, lognorm,
mnVal_hind,mnhind,logmnhind,sdhind,logsdhind, sim,gcmcmip,
CMIP,GCM,scen,sim_type ,units)%>%
dplyr::mutate(bc = "bias corrected",
GCM_scen = paste0(GCM,"_",scen),
mn_val_scaled =  (mn_val-mnhind )/sdhind))
#,
#                 logmn_val_scaled =  exp((log(mn_val+log_adj)-logmnhind )/logsdhind )-log_adj))
# tmphind$mn_val_scaled[!tmphind$lognorm=="none"]<-tmphind$logmn_val_scaled[!tmphind$lognorm=="none"]
tmpfut    <-  suppressWarnings(dfut%>%left_join(mn)%>%
dplyr::filter(var%in%varlist,basin==plotbasin,year%in%fut_yrs)%>%
dplyr::select(var,basin,year,mnDate,mn_val, val_biascorrected,
mnVal_hind,mnhind,logmnhind,sdhind,logsdhind, sim,gcmcmip,lognorm,
CMIP,GCM,scen,sim_type ,units)%>%
dplyr::mutate(bc = "bias corrected",
GCM_scen = paste0(GCM,"_",scen),
mn_val_scaled    =  (val_biascorrected-mnhind )/sdhind))
dfut
dfut%>%filter(var=="largeZoop_integrated",GCM=="cesm",scen=="ssp585")%>%select(var,basin,year,mn_val,val_biascorrected,mnhind,sdhind,mn_val_scaled,gcmcmip)
dfut%>%filter(var=="largeZoop_integrated",GCM=="cesm",scen=="ssp585")%>%
select(var,basin,year,mn_val,val_biascorrected,gcmcmip)
dfut%>%filter(year %in%2020:2025,
var=="largeZoop_integrated",GCM=="cesm",scen=="ssp585")%>%
select(var,basin,year,mn_val,val_biascorrected,gcmcmip)
dfut%>%filter(year %in%2020:2025,
var=="largeZoop_integrated",GCM=="cesm",scen=="ssp585")
dfut%>%filter(year %in%2023:2025,
var=="largeZoop_integrated",GCM=="cesm",scen=="ssp585")%>%
select(var,basin,year,mn_val,val_biascorrected,gcmcmip)
dfut%>%filter(year %in%2023:2025,
var=="largeZoop_integrated",GCM=="cesm",scen=="ssp585")
dfut%>%filter(year %in%2023:2025,
var=="largeZoop_integrated",GCM=="cesm",scen=="ssp585")%>%
select(var,basin,year,mn_val,val_biascorrected,val_biascorrectedyr,val_biascorrectedmo,sf_wk,sf_mo,sf_yr,val_delta,val_raw,mnVal_hist,mnVal_hind,gcmcmip)
dfut%>%filter(year %in%2023:2025,
var=="largeZoop_integrated",GCM=="cesm",scen=="ssp585")%>%
select(var,basin,year,mn_val,val_biascorrected,val_biascorrectedyr,val_biascorrectedmo,sf_wk,val_delta,val_raw,mnVal_hist,mnVal_hind,gcmcmip)
dfut%>%filter(year %in%2023:2025,
var=="largeZoop_integrated",GCM=="cesm",scen=="ssp585")%>%
select(var,basin,year,mn_val,val_raw,val_biascorrected,val_biascorrectedyr,val_biascorrectedmo,,mnVal_hist,mnVal_hind,gcmcmip)
dfut%>%filter(year %in%2023:2025,
var=="largeZoop_integrated",GCM=="cesm",scen=="ssp585")%>%
select(var,year,mn_val,val_biascorrected,val_biascorrectedyr,val_biascorrectedmo,mnVal_hist,mnVal_hind,gcmcmip)
dfut%>%filter(year %in%2023:2025,
var=="largeZoop_integrated",GCM=="cesm",scen=="ssp585")%>%
select(var,year,mn_val,val_biascorrected,sf_wk,mnVal_hist,mnVal_hind,val_biascorrectedyr,val_biascorrectedmo,,gcmcmip)
names(dfut)
dfut%>%filter(year %in%2023:2025,
var=="largeZoop_integrated",GCM=="cesm",scen=="ssp585")%>%
select(var,year,mn_val,total_area_km2,val_biascorrected,sf_wk,mnVal_hist,mnVal_hind,val_biascorrectedyr,val_biascorrectedmo,,gcmcmip)
